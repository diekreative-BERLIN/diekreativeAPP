{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as Éµngcc0 from '@angular/core';\nvar FirebaseX = /** @class */function (_super) {\n  __extends(FirebaseX, _super);\n  function FirebaseX() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  FirebaseX.prototype.getToken = function () {\n    return cordova(this, \"getToken\", {}, arguments);\n  };\n  FirebaseX.prototype.getId = function () {\n    return cordova(this, \"getId\", {}, arguments);\n  };\n  FirebaseX.prototype.getCurrentUser = function () {\n    return cordova(this, \"getCurrentUser\", {}, arguments);\n  };\n  FirebaseX.prototype.reloadCurrentUser = function () {\n    return cordova(this, \"reloadCurrentUser\", {}, arguments);\n  };\n  FirebaseX.prototype.onTokenRefresh = function () {\n    return cordova(this, \"onTokenRefresh\", {\n      \"observable\": true\n    }, arguments);\n  };\n  FirebaseX.prototype.getAPNSToken = function () {\n    return cordova(this, \"getAPNSToken\", {}, arguments);\n  };\n  FirebaseX.prototype.onApnsTokenReceived = function () {\n    return cordova(this, \"onApnsTokenReceived\", {\n      \"observable\": true\n    }, arguments);\n  };\n  FirebaseX.prototype.onMessageReceived = function () {\n    return cordova(this, \"onMessageReceived\", {\n      \"observable\": true\n    }, arguments);\n  };\n  FirebaseX.prototype.grantPermission = function () {\n    return cordova(this, \"grantPermission\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  FirebaseX.prototype.hasPermission = function () {\n    return cordova(this, \"hasPermission\", {}, arguments);\n  };\n  FirebaseX.prototype.unregister = function () {\n    return cordova(this, \"unregister\", {}, arguments);\n  };\n  FirebaseX.prototype.setBadgeNumber = function (badgeNumber) {\n    return cordova(this, \"setBadgeNumber\", {}, arguments);\n  };\n  FirebaseX.prototype.getBadgeNumber = function () {\n    return cordova(this, \"getBadgeNumber\", {}, arguments);\n  };\n  FirebaseX.prototype.clearAllNotifications = function () {\n    return cordova(this, \"clearAllNotifications\", {\n      \"platforms\": [\"Android\"]\n    }, arguments);\n  };\n  FirebaseX.prototype.subscribe = function (topic) {\n    return cordova(this, \"subscribe\", {}, arguments);\n  };\n  FirebaseX.prototype.unsubscribe = function (topic) {\n    return cordova(this, \"unsubscribe\", {}, arguments);\n  };\n  FirebaseX.prototype.isAutoInitEnabled = function () {\n    return cordova(this, \"isAutoInitEnabled\", {}, arguments);\n  };\n  FirebaseX.prototype.setAutoInitEnabled = function (enabled) {\n    return cordova(this, \"setAutoInitEnabled\", {}, arguments);\n  };\n  FirebaseX.prototype.createChannel = function (channelOptions) {\n    return cordova(this, \"createChannel\", {}, arguments);\n  };\n  FirebaseX.prototype.setDefaultChannel = function (channelOptions) {\n    return cordova(this, \"setDefaultChannel\", {}, arguments);\n  };\n  FirebaseX.prototype.deleteChannel = function (channelID) {\n    return cordova(this, \"deleteChannel\", {}, arguments);\n  };\n  FirebaseX.prototype.listChannels = function () {\n    return cordova(this, \"listChannels\", {}, arguments);\n  };\n  FirebaseX.prototype.setAnalyticsCollectionEnabled = function (enabled) {\n    return cordova(this, \"setAnalyticsCollectionEnabled\", {}, arguments);\n  };\n  FirebaseX.prototype.setCrashlyticsCollectionEnabled = function (enabled) {\n    return cordova(this, \"setCrashlyticsCollectionEnabled\", {}, arguments);\n  };\n  FirebaseX.prototype.setPerformanceCollectionEnabled = function (enabled) {\n    return cordova(this, \"setPerformanceCollectionEnabled\", {}, arguments);\n  };\n  FirebaseX.prototype.logEvent = function (type, data) {\n    return cordova(this, \"logEvent\", {}, arguments);\n  };\n  FirebaseX.prototype.setScreenName = function (name) {\n    return cordova(this, \"setScreenName\", {}, arguments);\n  };\n  FirebaseX.prototype.setUserId = function (userId) {\n    return cordova(this, \"setUserId\", {}, arguments);\n  };\n  FirebaseX.prototype.setUserProperty = function (name, value) {\n    return cordova(this, \"setUserProperty\", {}, arguments);\n  };\n  FirebaseX.prototype.setCrashlyticsUserId = function (userId) {\n    return cordova(this, \"setCrashlyticsUserId\", {}, arguments);\n  };\n  FirebaseX.prototype.sendCrash = function () {\n    return cordova(this, \"sendCrash\", {}, arguments);\n  };\n  FirebaseX.prototype.logMessage = function (message) {\n    return cordova(this, \"logMessage\", {}, arguments);\n  };\n  FirebaseX.prototype.logError = function (error, stackTrace) {\n    return cordova(this, \"logError\", {}, arguments);\n  };\n  FirebaseX.prototype.verifyPhoneNumber = function (phoneNumber, timeOutDuration, fakeVerificationCode) {\n    return cordova(this, \"verifyPhoneNumber\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  FirebaseX.prototype.setLanguageCode = function (lang) {\n    return cordova(this, \"setLanguageCode\", {}, arguments);\n  };\n  FirebaseX.prototype.signInWithCredential = function (credential) {\n    return cordova(this, \"signInWithCredential\", {}, arguments);\n  };\n  FirebaseX.prototype.createUserWithEmailAndPassword = function (email, password) {\n    return cordova(this, \"createUserWithEmailAndPassword\", {}, arguments);\n  };\n  FirebaseX.prototype.signInUserWithEmailAndPassword = function (email, password) {\n    return cordova(this, \"signInUserWithEmailAndPassword\", {}, arguments);\n  };\n  FirebaseX.prototype.signInUserWithCustomToken = function (customToken) {\n    return cordova(this, \"signInUserWithCustomToken\", {}, arguments);\n  };\n  FirebaseX.prototype.signInUserAnonymously = function () {\n    return cordova(this, \"signInUserAnonymously\", {}, arguments);\n  };\n  FirebaseX.prototype.authenticateUserWithGoogle = function (clientId) {\n    return cordova(this, \"authenticateUserWithGoogle\", {}, arguments);\n  };\n  FirebaseX.prototype.authenticateUserWithApple = function (locale) {\n    return cordova(this, \"authenticateUserWithApple\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  FirebaseX.prototype.linkUserWithCredential = function (credential, success, error) {\n    return cordova(this, \"linkUserWithCredential\", {}, arguments);\n  };\n  FirebaseX.prototype.reauthenticateWithCredential = function (credential, success, error) {\n    return cordova(this, \"reauthenticateWithCredential\", {}, arguments);\n  };\n  FirebaseX.prototype.isUserSignedIn = function () {\n    return cordova(this, \"isUserSignedIn\", {}, arguments);\n  };\n  FirebaseX.prototype.signOutUser = function () {\n    return cordova(this, \"signOutUser\", {}, arguments);\n  };\n  FirebaseX.prototype.updateUserProfile = function (profile) {\n    return cordova(this, \"updateUserProfile\", {}, arguments);\n  };\n  FirebaseX.prototype.updateUserEmail = function (email) {\n    return cordova(this, \"updateUserEmail\", {}, arguments);\n  };\n  FirebaseX.prototype.sendUserEmailVerification = function () {\n    return cordova(this, \"sendUserEmailVerification\", {}, arguments);\n  };\n  FirebaseX.prototype.updateUserPassword = function (password) {\n    return cordova(this, \"updateUserPassword\", {}, arguments);\n  };\n  FirebaseX.prototype.sendUserPasswordResetEmail = function (email) {\n    return cordova(this, \"sendUserPasswordResetEmail\", {}, arguments);\n  };\n  FirebaseX.prototype.deleteUser = function () {\n    return cordova(this, \"deleteUser\", {}, arguments);\n  };\n  FirebaseX.prototype.registerAuthStateChangeListener = function (fn) {\n    return cordova(this, \"registerAuthStateChangeListener\", {}, arguments);\n  };\n  FirebaseX.prototype.fetch = function (cacheExpirationSeconds) {\n    return cordova(this, \"fetch\", {}, arguments);\n  };\n  FirebaseX.prototype.activateFetched = function () {\n    return cordova(this, \"activateFetched\", {}, arguments);\n  };\n  FirebaseX.prototype.getValue = function (key) {\n    return cordova(this, \"getValue\", {}, arguments);\n  };\n  FirebaseX.prototype.getByteArray = function (key) {\n    return cordova(this, \"getByteArray\", {}, arguments);\n  };\n  FirebaseX.prototype.getInfo = function () {\n    return cordova(this, \"getInfo\", {}, arguments);\n  };\n  FirebaseX.prototype.setConfigSettings = function (settings) {\n    return cordova(this, \"setConfigSettings\", {}, arguments);\n  };\n  FirebaseX.prototype.setDefaults = function (settings) {\n    return cordova(this, \"setDefaults\", {}, arguments);\n  };\n  FirebaseX.prototype.startTrace = function (name) {\n    return cordova(this, \"startTrace\", {}, arguments);\n  };\n  FirebaseX.prototype.incrementCounter = function (name) {\n    return cordova(this, \"incrementCounter\", {}, arguments);\n  };\n  FirebaseX.prototype.stopTrace = function (name) {\n    return cordova(this, \"stopTrace\", {}, arguments);\n  };\n  FirebaseX.prototype.addDocumentToFirestoreCollection = function (document, collection, success, error) {\n    return cordova(this, \"addDocumentToFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.prototype.setDocumentInFirestoreCollection = function (documentId, document, collection, success, error) {\n    return cordova(this, \"setDocumentInFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.prototype.updateDocumentInFirestoreCollection = function (documentId, document, collection, success, error) {\n    return cordova(this, \"updateDocumentInFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.prototype.deleteDocumentFromFirestoreCollection = function (documentId, collection, success, error) {\n    return cordova(this, \"deleteDocumentFromFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.prototype.fetchDocumentInFirestoreCollection = function (documentId, collection, success, error) {\n    return cordova(this, \"fetchDocumentInFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.prototype.fetchFirestoreCollection = function (collection, success, error) {\n    return cordova(this, \"fetchFirestoreCollection\", {}, arguments);\n  };\n  FirebaseX.pluginName = \"FirebaseX\";\n  FirebaseX.plugin = \"cordova-plugin-firebasex\";\n  FirebaseX.pluginRef = \"FirebasePlugin\";\n  FirebaseX.repo = \"https://github.com/dpa99c/cordova-plugin-firebasex\";\n  FirebaseX.platforms = [\"Android\", \"iOS\"];\n  FirebaseX.Éµfac = /*@__PURE__*/function () {\n    var ÉµFirebaseX_BaseFactory;\n    return function FirebaseX_Factory(t) {\n      return (ÉµFirebaseX_BaseFactory || (ÉµFirebaseX_BaseFactory = Éµngcc0.ÉµÉµgetInheritedFactory(FirebaseX)))(t || FirebaseX);\n    };\n  }();\n  FirebaseX.Éµprov = /*@__PURE__*/Éµngcc0.ÉµÉµdefineInjectable({\n    token: FirebaseX,\n    factory: function (t) {\n      return FirebaseX.Éµfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return FirebaseX;\n}(IonicNativePlugin);\nexport { FirebaseX };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}