{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends, __values } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nimport { getNormalizedEventCoords } from './util';\n// Activation events registered on the root element of each instance for activation\nvar ACTIVATION_EVENT_TYPES = ['touchstart', 'pointerdown', 'mousedown', 'keydown'];\n// Deactivation events registered on documentElement when a pointer-related down event occurs\nvar POINTER_DEACTIVATION_EVENT_TYPES = ['touchend', 'pointerup', 'mouseup', 'contextmenu'];\n// simultaneous nested activations\nvar activatedTargets = [];\nvar MDCRippleFoundation = /** @class */function (_super) {\n  __extends(MDCRippleFoundation, _super);\n  function MDCRippleFoundation(adapter) {\n    var _this = _super.call(this, __assign(__assign({}, MDCRippleFoundation.defaultAdapter), adapter)) || this;\n    _this.activationAnimationHasEnded = false;\n    _this.activationTimer = 0;\n    _this.fgDeactivationRemovalTimer = 0;\n    _this.fgScale = '0';\n    _this.frame = {\n      width: 0,\n      height: 0\n    };\n    _this.initialSize = 0;\n    _this.layoutFrame = 0;\n    _this.maxRadius = 0;\n    _this.unboundedCoords = {\n      left: 0,\n      top: 0\n    };\n    _this.activationState = _this.defaultActivationState();\n    _this.activationTimerCallback = function () {\n      _this.activationAnimationHasEnded = true;\n      _this.runDeactivationUXLogicIfReady();\n    };\n    _this.activateHandler = function (e) {\n      _this.activateImpl(e);\n    };\n    _this.deactivateHandler = function () {\n      _this.deactivateImpl();\n    };\n    _this.focusHandler = function () {\n      _this.handleFocus();\n    };\n    _this.blurHandler = function () {\n      _this.handleBlur();\n    };\n    _this.resizeHandler = function () {\n      _this.layout();\n    };\n    return _this;\n  }\n  Object.defineProperty(MDCRippleFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCRippleFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCRippleFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCRippleFoundation, \"defaultAdapter\", {\n    get: function () {\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        browserSupportsCssVars: function () {\n          return true;\n        },\n        computeBoundingRect: function () {\n          return {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0,\n            width: 0,\n            height: 0\n          };\n        },\n        containsEventTarget: function () {\n          return true;\n        },\n        deregisterDocumentInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterInteractionHandler: function () {\n          return undefined;\n        },\n        deregisterResizeHandler: function () {\n          return undefined;\n        },\n        getWindowPageOffset: function () {\n          return {\n            x: 0,\n            y: 0\n          };\n        },\n        isSurfaceActive: function () {\n          return true;\n        },\n        isSurfaceDisabled: function () {\n          return true;\n        },\n        isUnbounded: function () {\n          return true;\n        },\n        registerDocumentInteractionHandler: function () {\n          return undefined;\n        },\n        registerInteractionHandler: function () {\n          return undefined;\n        },\n        registerResizeHandler: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        updateCssVariable: function () {\n          return undefined;\n        }\n      };\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MDCRippleFoundation.prototype.init = function () {\n    var _this = this;\n    var supportsPressRipple = this.supportsPressRipple();\n    this.registerRootHandlers(supportsPressRipple);\n    if (supportsPressRipple) {\n      var _a = MDCRippleFoundation.cssClasses,\n        ROOT_1 = _a.ROOT,\n        UNBOUNDED_1 = _a.UNBOUNDED;\n      requestAnimationFrame(function () {\n        _this.adapter.addClass(ROOT_1);\n        if (_this.adapter.isUnbounded()) {\n          _this.adapter.addClass(UNBOUNDED_1);\n          // Unbounded ripples need layout logic applied immediately to set coordinates for both shade and ripple\n          _this.layoutInternal();\n        }\n      });\n    }\n  };\n  MDCRippleFoundation.prototype.destroy = function () {\n    var _this = this;\n    if (this.supportsPressRipple()) {\n      if (this.activationTimer) {\n        clearTimeout(this.activationTimer);\n        this.activationTimer = 0;\n        this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_ACTIVATION);\n      }\n      if (this.fgDeactivationRemovalTimer) {\n        clearTimeout(this.fgDeactivationRemovalTimer);\n        this.fgDeactivationRemovalTimer = 0;\n        this.adapter.removeClass(MDCRippleFoundation.cssClasses.FG_DEACTIVATION);\n      }\n      var _a = MDCRippleFoundation.cssClasses,\n        ROOT_2 = _a.ROOT,\n        UNBOUNDED_2 = _a.UNBOUNDED;\n      requestAnimationFrame(function () {\n        _this.adapter.removeClass(ROOT_2);\n        _this.adapter.removeClass(UNBOUNDED_2);\n        _this.removeCssVars();\n      });\n    }\n    this.deregisterRootHandlers();\n    this.deregisterDeactivationHandlers();\n  };\n  /**\n   * @param evt Optional event containing position information.\n   */\n  MDCRippleFoundation.prototype.activate = function (evt) {\n    this.activateImpl(evt);\n  };\n  MDCRippleFoundation.prototype.deactivate = function () {\n    this.deactivateImpl();\n  };\n  MDCRippleFoundation.prototype.layout = function () {\n    var _this = this;\n    if (this.layoutFrame) {\n      cancelAnimationFrame(this.layoutFrame);\n    }\n    this.layoutFrame = requestAnimationFrame(function () {\n      _this.layoutInternal();\n      _this.layoutFrame = 0;\n    });\n  };\n  MDCRippleFoundation.prototype.setUnbounded = function (unbounded) {\n    var UNBOUNDED = MDCRippleFoundation.cssClasses.UNBOUNDED;\n    if (unbounded) {\n      this.adapter.addClass(UNBOUNDED);\n    } else {\n      this.adapter.removeClass(UNBOUNDED);\n    }\n  };\n  MDCRippleFoundation.prototype.handleFocus = function () {\n    var _this = this;\n    requestAnimationFrame(function () {\n      return _this.adapter.addClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n    });\n  };\n  MDCRippleFoundation.prototype.handleBlur = function () {\n    var _this = this;\n    requestAnimationFrame(function () {\n      return _this.adapter.removeClass(MDCRippleFoundation.cssClasses.BG_FOCUSED);\n    });\n  };\n  /**\n   * We compute this property so that we are not querying information about the client\n   * until the point in time where the foundation requests it. This prevents scenarios where\n   * client-side feature-detection may happen too early, such as when components are rendered on the server\n   * and then initialized at mount time on the client.\n   */\n  MDCRippleFoundation.prototype.supportsPressRipple = function () {\n    return this.adapter.browserSupportsCssVars();\n  };\n  MDCRippleFoundation.prototype.defaultActivationState = function () {\n    return {\n      activationEvent: undefined,\n      hasDeactivationUXRun: false,\n      isActivated: false,\n      isProgrammatic: false,\n      wasActivatedByPointer: false,\n      wasElementMadeActive: false\n    };\n  };\n  /**\n   * supportsPressRipple Passed from init to save a redundant function call\n   */\n  MDCRippleFoundation.prototype.registerRootHandlers = function (supportsPressRipple) {\n    var e_1, _a;\n    if (supportsPressRipple) {\n      try {\n        for (var ACTIVATION_EVENT_TYPES_1 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next(); !ACTIVATION_EVENT_TYPES_1_1.done; ACTIVATION_EVENT_TYPES_1_1 = ACTIVATION_EVENT_TYPES_1.next()) {\n          var evtType = ACTIVATION_EVENT_TYPES_1_1.value;\n          this.adapter.registerInteractionHandler(evtType, this.activateHandler);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (ACTIVATION_EVENT_TYPES_1_1 && !ACTIVATION_EVENT_TYPES_1_1.done && (_a = ACTIVATION_EVENT_TYPES_1.return)) _a.call(ACTIVATION_EVENT_TYPES_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n      if (this.adapter.isUnbounded()) {\n        this.adapter.registerResizeHandler(this.resizeHandler);\n      }\n    }\n    this.adapter.registerInteractionHandler('focus', this.focusHandler);\n    this.adapter.registerInteractionHandler('blur', this.blurHandler);\n  };\n  MDCRippleFoundation.prototype.registerDeactivationHandlers = function (evt) {\n    var e_2, _a;\n    if (evt.type === 'keydown') {\n      this.adapter.registerInteractionHandler('keyup', this.deactivateHandler);\n    } else {\n      try {\n        for (var POINTER_DEACTIVATION_EVENT_TYPES_1 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next(); !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done; POINTER_DEACTIVATION_EVENT_TYPES_1_1 = POINTER_DEACTIVATION_EVENT_TYPES_1.next()) {\n          var evtType = POINTER_DEACTIVATION_EVENT_TYPES_1_1.value;\n          this.adapter.registerDocumentInteractionHandler(evtType, this.deactivateHandler);\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (POINTER_DEACTIVATION_EVENT_TYPES_1_1 && !POINTER_DEACTIVATION_EVENT_TYPES_1_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_1.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_1);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n    }\n  };\n  MDCRippleFoundation.prototype.deregisterRootHandlers = function () {\n    var e_3, _a;\n    try {\n      for (var ACTIVATION_EVENT_TYPES_2 = __values(ACTIVATION_EVENT_TYPES), ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next(); !ACTIVATION_EVENT_TYPES_2_1.done; ACTIVATION_EVENT_TYPES_2_1 = ACTIVATION_EVENT_TYPES_2.next()) {\n        var evtType = ACTIVATION_EVENT_TYPES_2_1.value;\n        this.adapter.deregisterInteractionHandler(evtType, this.activateHandler);\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (ACTIVATION_EVENT_TYPES_2_1 && !ACTIVATION_EVENT_TYPES_2_1.done && (_a = ACTIVATION_EVENT_TYPES_2.return)) _a.call(ACTIVATION_EVENT_TYPES_2);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n    this.adapter.deregisterInteractionHandler('focus', this.focusHandler);\n    this.adapter.deregisterInteractionHandler('blur', this.blurHandler);\n    if (this.adapter.isUnbounded()) {\n      this.adapter.deregisterResizeHandler(this.resizeHandler);\n    }\n  };\n  MDCRippleFoundation.prototype.deregisterDeactivationHandlers = function () {\n    var e_4, _a;\n    this.adapter.deregisterInteractionHandler('keyup', this.deactivateHandler);\n    try {\n      for (var POINTER_DEACTIVATION_EVENT_TYPES_2 = __values(POINTER_DEACTIVATION_EVENT_TYPES), POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next(); !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done; POINTER_DEACTIVATION_EVENT_TYPES_2_1 = POINTER_DEACTIVATION_EVENT_TYPES_2.next()) {\n        var evtType = POINTER_DEACTIVATION_EVENT_TYPES_2_1.value;\n        this.adapter.deregisterDocumentInteractionHandler(evtType, this.deactivateHandler);\n      }\n    } catch (e_4_1) {\n      e_4 = {\n        error: e_4_1\n      };\n    } finally {\n      try {\n        if (POINTER_DEACTIVATION_EVENT_TYPES_2_1 && !POINTER_DEACTIVATION_EVENT_TYPES_2_1.done && (_a = POINTER_DEACTIVATION_EVENT_TYPES_2.return)) _a.call(POINTER_DEACTIVATION_EVENT_TYPES_2);\n      } finally {\n        if (e_4) throw e_4.error;\n      }\n    }\n  };\n  MDCRippleFoundation.prototype.removeCssVars = function () {\n    var _this = this;\n    var rippleStrings = MDCRippleFoundation.strings;\n    var keys = Object.keys(rippleStrings);\n    keys.forEach(function (key) {\n      if (key.indexOf('VAR_') === 0) {\n        _this.adapter.updateCssVariable(rippleStrings[key], null);\n      }\n    });\n  };\n  MDCRippleFoundation.prototype.activateImpl = function (evt) {\n    var _this = this;\n    if (this.adapter.isSurfaceDisabled()) {\n      return;\n    }\n    var activationState = this.activationState;\n    if (activationState.isActivated) {\n      return;\n    }\n    // Avoid reacting to follow-on events fired by touch device after an already-processed user interaction\n    var previousActivationEvent = this.previousActivationEvent;\n    var isSameInteraction = previousActivationEvent && evt !== undefined && previousActivationEvent.type !== evt.type;\n    if (isSameInteraction) {\n      return;\n    }\n    activationState.isActivated = true;\n    activationState.isProgrammatic = evt === undefined;\n    activationState.activationEvent = evt;\n    activationState.wasActivatedByPointer = activationState.isProgrammatic ? false : evt !== undefined && (evt.type === 'mousedown' || evt.type === 'touchstart' || evt.type === 'pointerdown');\n    var hasActivatedChild = evt !== undefined && activatedTargets.length > 0 && activatedTargets.some(function (target) {\n      return _this.adapter.containsEventTarget(target);\n    });\n    if (hasActivatedChild) {\n      // Immediately reset activation state, while preserving logic that prevents touch follow-on events\n      this.resetActivationState();\n      return;\n    }\n    if (evt !== undefined) {\n      activatedTargets.push(evt.target);\n      this.registerDeactivationHandlers(evt);\n    }\n    activationState.wasElementMadeActive = this.checkElementMadeActive(evt);\n    if (activationState.wasElementMadeActive) {\n      this.animateActivation();\n    }\n    requestAnimationFrame(function () {\n      // Reset array on next frame after the current event has had a chance to bubble to prevent ancestor ripples\n      activatedTargets = [];\n      if (!activationState.wasElementMadeActive && evt !== undefined && (evt.key === ' ' || evt.keyCode === 32)) {\n        // If space was pressed, try again within an rAF call to detect :active, because different UAs report\n        // active states inconsistently when they're called within event handling code:\n        // - https://bugs.chromium.org/p/chromium/issues/detail?id=635971\n        // - https://bugzilla.mozilla.org/show_bug.cgi?id=1293741\n        // We try first outside rAF to support Edge, which does not exhibit this problem, but will crash if a CSS\n        // variable is set within a rAF callback for a submit button interaction (#2241).\n        activationState.wasElementMadeActive = _this.checkElementMadeActive(evt);\n        if (activationState.wasElementMadeActive) {\n          _this.animateActivation();\n        }\n      }\n      if (!activationState.wasElementMadeActive) {\n        // Reset activation state immediately if element was not made active.\n        _this.activationState = _this.defaultActivationState();\n      }\n    });\n  };\n  MDCRippleFoundation.prototype.checkElementMadeActive = function (evt) {\n    return evt !== undefined && evt.type === 'keydown' ? this.adapter.isSurfaceActive() : true;\n  };\n  MDCRippleFoundation.prototype.animateActivation = function () {\n    var _this = this;\n    var _a = MDCRippleFoundation.strings,\n      VAR_FG_TRANSLATE_START = _a.VAR_FG_TRANSLATE_START,\n      VAR_FG_TRANSLATE_END = _a.VAR_FG_TRANSLATE_END;\n    var _b = MDCRippleFoundation.cssClasses,\n      FG_DEACTIVATION = _b.FG_DEACTIVATION,\n      FG_ACTIVATION = _b.FG_ACTIVATION;\n    var DEACTIVATION_TIMEOUT_MS = MDCRippleFoundation.numbers.DEACTIVATION_TIMEOUT_MS;\n    this.layoutInternal();\n    var translateStart = '';\n    var translateEnd = '';\n    if (!this.adapter.isUnbounded()) {\n      var _c = this.getFgTranslationCoordinates(),\n        startPoint = _c.startPoint,\n        endPoint = _c.endPoint;\n      translateStart = startPoint.x + \"px, \" + startPoint.y + \"px\";\n      translateEnd = endPoint.x + \"px, \" + endPoint.y + \"px\";\n    }\n    this.adapter.updateCssVariable(VAR_FG_TRANSLATE_START, translateStart);\n    this.adapter.updateCssVariable(VAR_FG_TRANSLATE_END, translateEnd);\n    // Cancel any ongoing activation/deactivation animations\n    clearTimeout(this.activationTimer);\n    clearTimeout(this.fgDeactivationRemovalTimer);\n    this.rmBoundedActivationClasses();\n    this.adapter.removeClass(FG_DEACTIVATION);\n    // Force layout in order to re-trigger the animation.\n    this.adapter.computeBoundingRect();\n    this.adapter.addClass(FG_ACTIVATION);\n    this.activationTimer = setTimeout(function () {\n      _this.activationTimerCallback();\n    }, DEACTIVATION_TIMEOUT_MS);\n  };\n  MDCRippleFoundation.prototype.getFgTranslationCoordinates = function () {\n    var _a = this.activationState,\n      activationEvent = _a.activationEvent,\n      wasActivatedByPointer = _a.wasActivatedByPointer;\n    var startPoint;\n    if (wasActivatedByPointer) {\n      startPoint = getNormalizedEventCoords(activationEvent, this.adapter.getWindowPageOffset(), this.adapter.computeBoundingRect());\n    } else {\n      startPoint = {\n        x: this.frame.width / 2,\n        y: this.frame.height / 2\n      };\n    }\n    // Center the element around the start point.\n    startPoint = {\n      x: startPoint.x - this.initialSize / 2,\n      y: startPoint.y - this.initialSize / 2\n    };\n    var endPoint = {\n      x: this.frame.width / 2 - this.initialSize / 2,\n      y: this.frame.height / 2 - this.initialSize / 2\n    };\n    return {\n      startPoint: startPoint,\n      endPoint: endPoint\n    };\n  };\n  MDCRippleFoundation.prototype.runDeactivationUXLogicIfReady = function () {\n    var _this = this;\n    // This method is called both when a pointing device is released, and when the activation animation ends.\n    // The deactivation animation should only run after both of those occur.\n    var FG_DEACTIVATION = MDCRippleFoundation.cssClasses.FG_DEACTIVATION;\n    var _a = this.activationState,\n      hasDeactivationUXRun = _a.hasDeactivationUXRun,\n      isActivated = _a.isActivated;\n    var activationHasEnded = hasDeactivationUXRun || !isActivated;\n    if (activationHasEnded && this.activationAnimationHasEnded) {\n      this.rmBoundedActivationClasses();\n      this.adapter.addClass(FG_DEACTIVATION);\n      this.fgDeactivationRemovalTimer = setTimeout(function () {\n        _this.adapter.removeClass(FG_DEACTIVATION);\n      }, numbers.FG_DEACTIVATION_MS);\n    }\n  };\n  MDCRippleFoundation.prototype.rmBoundedActivationClasses = function () {\n    var FG_ACTIVATION = MDCRippleFoundation.cssClasses.FG_ACTIVATION;\n    this.adapter.removeClass(FG_ACTIVATION);\n    this.activationAnimationHasEnded = false;\n    this.adapter.computeBoundingRect();\n  };\n  MDCRippleFoundation.prototype.resetActivationState = function () {\n    var _this = this;\n    this.previousActivationEvent = this.activationState.activationEvent;\n    this.activationState = this.defaultActivationState();\n    // Touch devices may fire additional events for the same interaction within a short time.\n    // Store the previous event until it's safe to assume that subsequent events are for new interactions.\n    setTimeout(function () {\n      return _this.previousActivationEvent = undefined;\n    }, MDCRippleFoundation.numbers.TAP_DELAY_MS);\n  };\n  MDCRippleFoundation.prototype.deactivateImpl = function () {\n    var _this = this;\n    var activationState = this.activationState;\n    // This can happen in scenarios such as when you have a keyup event that blurs the element.\n    if (!activationState.isActivated) {\n      return;\n    }\n    var state = __assign({}, activationState);\n    if (activationState.isProgrammatic) {\n      requestAnimationFrame(function () {\n        _this.animateDeactivation(state);\n      });\n      this.resetActivationState();\n    } else {\n      this.deregisterDeactivationHandlers();\n      requestAnimationFrame(function () {\n        _this.activationState.hasDeactivationUXRun = true;\n        _this.animateDeactivation(state);\n        _this.resetActivationState();\n      });\n    }\n  };\n  MDCRippleFoundation.prototype.animateDeactivation = function (_a) {\n    var wasActivatedByPointer = _a.wasActivatedByPointer,\n      wasElementMadeActive = _a.wasElementMadeActive;\n    if (wasActivatedByPointer || wasElementMadeActive) {\n      this.runDeactivationUXLogicIfReady();\n    }\n  };\n  MDCRippleFoundation.prototype.layoutInternal = function () {\n    var _this = this;\n    this.frame = this.adapter.computeBoundingRect();\n    var maxDim = Math.max(this.frame.height, this.frame.width);\n    // Surface diameter is treated differently for unbounded vs. bounded ripples.\n    // Unbounded ripple diameter is calculated smaller since the surface is expected to already be padded appropriately\n    // to extend the hitbox, and the ripple is expected to meet the edges of the padded hitbox (which is typically\n    // square). Bounded ripples, on the other hand, are fully expected to expand beyond the surface's longest diameter\n    // (calculated based on the diagonal plus a constant padding), and are clipped at the surface's border via\n    // `overflow: hidden`.\n    var getBoundedRadius = function () {\n      var hypotenuse = Math.sqrt(Math.pow(_this.frame.width, 2) + Math.pow(_this.frame.height, 2));\n      return hypotenuse + MDCRippleFoundation.numbers.PADDING;\n    };\n    this.maxRadius = this.adapter.isUnbounded() ? maxDim : getBoundedRadius();\n    // Ripple is sized as a fraction of the largest dimension of the surface, then scales up using a CSS scale transform\n    var initialSize = Math.floor(maxDim * MDCRippleFoundation.numbers.INITIAL_ORIGIN_SCALE);\n    // Unbounded ripple size should always be even number to equally center align.\n    if (this.adapter.isUnbounded() && initialSize % 2 !== 0) {\n      this.initialSize = initialSize - 1;\n    } else {\n      this.initialSize = initialSize;\n    }\n    this.fgScale = \"\" + this.maxRadius / this.initialSize;\n    this.updateLayoutCssVars();\n  };\n  MDCRippleFoundation.prototype.updateLayoutCssVars = function () {\n    var _a = MDCRippleFoundation.strings,\n      VAR_FG_SIZE = _a.VAR_FG_SIZE,\n      VAR_LEFT = _a.VAR_LEFT,\n      VAR_TOP = _a.VAR_TOP,\n      VAR_FG_SCALE = _a.VAR_FG_SCALE;\n    this.adapter.updateCssVariable(VAR_FG_SIZE, this.initialSize + \"px\");\n    this.adapter.updateCssVariable(VAR_FG_SCALE, this.fgScale);\n    if (this.adapter.isUnbounded()) {\n      this.unboundedCoords = {\n        left: Math.round(this.frame.width / 2 - this.initialSize / 2),\n        top: Math.round(this.frame.height / 2 - this.initialSize / 2)\n      };\n      this.adapter.updateCssVariable(VAR_LEFT, this.unboundedCoords.left + \"px\");\n      this.adapter.updateCssVariable(VAR_TOP, this.unboundedCoords.top + \"px\");\n    }\n  };\n  return MDCRippleFoundation;\n}(MDCFoundation);\nexport { MDCRippleFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCRippleFoundation;\n//# sourceMappingURL=foundation.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}