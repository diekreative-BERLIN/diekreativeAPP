{"ast":null,"code":"import _asyncToGenerator from \"/Users/marc/Documents/IONIC_Projekte/diekreativeAPP/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { toDataURL, toCanvas, toString } from 'qrcode';\nimport * as i1 from '@angular/platform-browser';\nconst _c0 = [\"qrcElement\"];\nlet QRCodeComponent = /*#__PURE__*/(() => {\n  class QRCodeComponent {\n    constructor(renderer, sanitizer) {\n      this.renderer = renderer;\n      this.sanitizer = sanitizer;\n      this.allowEmptyString = false;\n      this.colorDark = \"#000000ff\";\n      this.colorLight = \"#ffffffff\";\n      this.cssClass = \"qrcode\";\n      this.elementType = \"canvas\";\n      this.errorCorrectionLevel = \"M\";\n      this.margin = 4;\n      this.qrdata = \"\";\n      this.scale = 4;\n      this.width = 10;\n      this.qrCodeURL = new EventEmitter();\n      this.context = null;\n    }\n    ngOnChanges() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        yield _this.createQRCode();\n      })();\n    }\n    isValidQrCodeText(data) {\n      if (this.allowEmptyString === false) {\n        return !(typeof data === \"undefined\" || data === \"\" || data === \"null\" || data === null);\n      }\n      return !(typeof data === \"undefined\");\n    }\n    toDataURL(qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        toDataURL(this.qrdata, qrCodeConfig, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n    toCanvas(canvas, qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        toCanvas(canvas, this.qrdata, qrCodeConfig, error => {\n          if (error) {\n            reject(error);\n          } else {\n            resolve(\"success\");\n          }\n        });\n      });\n    }\n    toSVG(qrCodeConfig) {\n      return new Promise((resolve, reject) => {\n        toString(this.qrdata, qrCodeConfig, (err, url) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(url);\n          }\n        });\n      });\n    }\n    renderElement(element) {\n      for (const node of this.qrcElement.nativeElement.childNodes) {\n        this.renderer.removeChild(this.qrcElement.nativeElement, node);\n      }\n      this.renderer.appendChild(this.qrcElement.nativeElement, element);\n    }\n    createQRCode() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.version && _this2.version > 40) {\n          console.warn(\"[angularx-qrcode] max value for `version` is 40\");\n          _this2.version = 40;\n        } else if (_this2.version && _this2.version < 1) {\n          console.warn(\"[angularx-qrcode]`min value for `version` is 1\");\n          _this2.version = 1;\n        } else if (_this2.version !== undefined && isNaN(_this2.version)) {\n          console.warn(\"[angularx-qrcode] version should be a number, defaulting to auto.\");\n          _this2.version = undefined;\n        }\n        try {\n          if (!_this2.isValidQrCodeText(_this2.qrdata)) {\n            throw new Error(\"[angularx-qrcode] Field `qrdata` is empty, set 'allowEmptyString=\\\"true\\\"' to overwrite this behaviour.\");\n          }\n          if (_this2.isValidQrCodeText(_this2.qrdata) && _this2.qrdata === \"\") {\n            _this2.qrdata = \" \";\n          }\n          const config = {\n            color: {\n              dark: _this2.colorDark,\n              light: _this2.colorLight\n            },\n            errorCorrectionLevel: _this2.errorCorrectionLevel,\n            margin: _this2.margin,\n            scale: _this2.scale,\n            version: _this2.version,\n            width: _this2.width\n          };\n          const centerImageSrc = _this2.imageSrc;\n          const centerImageHeight = _this2.imageHeight || 40;\n          const centerImageWidth = _this2.imageWidth || 40;\n          switch (_this2.elementType) {\n            case \"canvas\":\n              const canvasElement = _this2.renderer.createElement(\"canvas\");\n              _this2.context = canvasElement.getContext(\"2d\");\n              _this2.toCanvas(canvasElement, config).then(() => {\n                if (_this2.ariaLabel) {\n                  _this2.renderer.setAttribute(canvasElement, \"aria-label\", `${_this2.ariaLabel}`);\n                }\n                if (_this2.title) {\n                  _this2.renderer.setAttribute(canvasElement, \"title\", `${_this2.title}`);\n                }\n                if (centerImageSrc && _this2.context) {\n                  _this2.centerImage = new Image(centerImageWidth, centerImageHeight);\n                  if (centerImageSrc !== _this2.centerImage.src) {\n                    _this2.centerImage.src = centerImageSrc;\n                  }\n                  if (centerImageHeight !== _this2.centerImage.height) {\n                    _this2.centerImage.height = centerImageHeight;\n                  }\n                  if (centerImageWidth !== _this2.centerImage.width) {\n                    _this2.centerImage.width = centerImageWidth;\n                  }\n                  const centerImage = _this2.centerImage;\n                  if (centerImage) {\n                    centerImage.onload = () => {\n                      _this2.context?.drawImage(centerImage, canvasElement.width / 2 - centerImageWidth / 2, canvasElement.height / 2 - centerImageHeight / 2, centerImageWidth, centerImageHeight);\n                    };\n                  }\n                }\n                _this2.renderElement(canvasElement);\n                _this2.emitQRCodeURL(canvasElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] canvas error:\", e);\n              });\n              break;\n            case \"svg\":\n              const svgParentElement = _this2.renderer.createElement(\"div\");\n              _this2.toSVG(config).then(svgString => {\n                _this2.renderer.setProperty(svgParentElement, \"innerHTML\", svgString);\n                const svgElement = svgParentElement.firstChild;\n                _this2.renderer.setAttribute(svgElement, \"height\", `${_this2.width}`);\n                _this2.renderer.setAttribute(svgElement, \"width\", `${_this2.width}`);\n                _this2.renderElement(svgElement);\n                _this2.emitQRCodeURL(svgElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] svg error:\", e);\n              });\n              break;\n            case \"url\":\n            case \"img\":\n            default:\n              const imgElement = _this2.renderer.createElement(\"img\");\n              _this2.toDataURL(config).then(dataUrl => {\n                if (_this2.alt) {\n                  imgElement.setAttribute(\"alt\", _this2.alt);\n                }\n                if (_this2.ariaLabel) {\n                  imgElement.setAttribute(\"aria-label\", _this2.ariaLabel);\n                }\n                imgElement.setAttribute(\"src\", dataUrl);\n                if (_this2.title) {\n                  imgElement.setAttribute(\"title\", _this2.title);\n                }\n                _this2.renderElement(imgElement);\n                _this2.emitQRCodeURL(imgElement);\n              }).catch(e => {\n                console.error(\"[angularx-qrcode] img/url error:\", e);\n              });\n          }\n        } catch (e) {\n          console.error(\"[angularx-qrcode] Error generating QR Code:\", e.message);\n        }\n      })();\n    }\n    emitQRCodeURL(element) {\n      const className = element.constructor.name;\n      if (className === SVGSVGElement.name) {\n        const svgHTML = element.outerHTML;\n        const blob = new Blob([svgHTML], {\n          type: \"image/svg+xml\"\n        });\n        const urlSvg = URL.createObjectURL(blob);\n        const urlSanitized = this.sanitizer.bypassSecurityTrustUrl(urlSvg);\n        this.qrCodeURL.emit(urlSanitized);\n        return;\n      }\n      let urlImage = \"\";\n      if (className === HTMLCanvasElement.name) {\n        urlImage = element.toDataURL(\"image/png\");\n      }\n      if (className === HTMLImageElement.name) {\n        urlImage = element.src;\n      }\n      fetch(urlImage).then(urlResponse => urlResponse.blob()).then(blob => URL.createObjectURL(blob)).then(url => this.sanitizer.bypassSecurityTrustUrl(url)).then(urlSanitized => {\n        this.qrCodeURL.emit(urlSanitized);\n      }).catch(error => {\n        console.error(\"[angularx-qrcode] Error when fetching image/png URL: \" + error);\n      });\n    }\n  }\n  QRCodeComponent.ɵfac = function QRCodeComponent_Factory(t) {\n    return new (t || QRCodeComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.DomSanitizer));\n  };\n  QRCodeComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: QRCodeComponent,\n    selectors: [[\"qrcode\"]],\n    viewQuery: function QRCodeComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.qrcElement = _t.first);\n      }\n    },\n    inputs: {\n      allowEmptyString: \"allowEmptyString\",\n      colorDark: \"colorDark\",\n      colorLight: \"colorLight\",\n      cssClass: \"cssClass\",\n      elementType: \"elementType\",\n      errorCorrectionLevel: \"errorCorrectionLevel\",\n      imageSrc: \"imageSrc\",\n      imageHeight: \"imageHeight\",\n      imageWidth: \"imageWidth\",\n      margin: \"margin\",\n      qrdata: \"qrdata\",\n      scale: \"scale\",\n      version: \"version\",\n      width: \"width\",\n      alt: \"alt\",\n      ariaLabel: \"ariaLabel\",\n      title: \"title\"\n    },\n    outputs: {\n      qrCodeURL: \"qrCodeURL\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[\"qrcElement\", \"\"]],\n    template: function QRCodeComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", null, 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵclassMap(ctx.cssClass);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return QRCodeComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QRCodeModule = /*#__PURE__*/(() => {\n  class QRCodeModule {}\n  QRCodeModule.ɵfac = function QRCodeModule_Factory(t) {\n    return new (t || QRCodeModule)();\n  };\n  QRCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QRCodeModule\n  });\n  QRCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n  return QRCodeModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { QRCodeComponent, QRCodeModule };\n//# sourceMappingURL=angularx-qrcode.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}