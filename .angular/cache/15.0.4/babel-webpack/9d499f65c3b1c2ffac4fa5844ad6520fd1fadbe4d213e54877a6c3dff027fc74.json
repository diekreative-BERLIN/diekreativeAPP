{"ast":null,"code":"//timezone\nimport * as moment from 'moment-timezone';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./connectors/churchapi.service\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@ionic-native/native-storage/ngx\";\nexport let UserstateService = /*#__PURE__*/(() => {\n  class UserstateService {\n    constructor(churchtools, platform, nativeStorage) {\n      this.churchtools = churchtools;\n      this.platform = platform;\n      this.nativeStorage = nativeStorage;\n      //use of moment.js library\n      this.momentjs = moment;\n      this.loggedin = false;\n      this.personid = 0;\n      this.hasTuerOeffner = false;\n      this.logintoken = \"\";\n      this.fullusername = \"\";\n      this.shortusername = \"\";\n      this.explicitusername = \"\";\n      //  loginstring = \"\";\n      this.AppPageTUNInit = false;\n      this.AppPageTunTimestamp = 1601000000000;\n      this.AppPageMedienInit = false;\n      this.isOnline = false;\n      this.homescreen_default = [{\n        id: 'Mediathek',\n        val: 'Mediathek',\n        isChecked: true\n      }, {\n        id: 'Termine',\n        val: 'Termine',\n        isChecked: true\n      }, {\n        id: 'Tagundnacht',\n        val: 'Tagundnacht',\n        isChecked: true\n      }, {\n        id: 'Gottesdienste',\n        val: 'Gottesdienste',\n        isChecked: true\n      }, {\n        id: 'LifeGroups',\n        val: 'LifeGroups',\n        isChecked: true\n      }, {\n        id: 'Ueberuns',\n        val: 'Ãœber uns',\n        isChecked: true\n      }, {\n        id: 'Geben',\n        val: 'Geben',\n        isChecked: true\n      }, {\n        id: 'Erlebt',\n        val: 'Erlebt',\n        isChecked: true\n      }];\n      //{ id: 'Akademie',      val: 'Akademie',      isChecked: true },\n      //{ id: 'Audienz',       val: 'Audienz',       isChecked: true }\n      this.homescreen = new BehaviorSubject([]);\n      //this.homescreen.next(JSON.parse(JSON.stringify(this.homescreen_default)));\n      this.homescreen.next(this.homescreen_default);\n      platform.ready().then(() => {\n        //User auslesen\n        nativeStorage.getItem('currentUser').then(user => {\n          this.personid = user.personid;\n          this.logintoken = user.logintoken;\n          this.fullusername = user.fullusername;\n          this.shortusername = user.shortusername;\n          this.explicitusername = user.explicitusername;\n          this.loggedin = true;\n          this.hasTuerOeffner = user.hasTuerOeffner;\n          if (this.isOnline) {\n            this.churchtools.loginWithToken(this.personid, this.logintoken).then(res => {\n              console.log(\"Login With token\" + JSON.stringify(res));\n              console.log(\"login status=\" + JSON.parse(res.data).status);\n              if (JSON.parse(res.data).status == \"fail\") {\n                this.nativeStorage.remove('currentUser');\n                this.loggedin = false;\n                this.personid = 0;\n                this.hasTuerOeffner = false;\n                this.logintoken = \"\";\n                this.fullusername = \"\";\n                this.shortusername = \"\";\n                this.explicitusername = \"\";\n                console.log(\"---> User loged out\");\n              }\n            }).catch(err => {\n              console.log(\"Error Login with token\" + JSON.stringify(err));\n              this.nativeStorage.remove('currentUser');\n              this.loggedin = false;\n              this.personid = 0;\n              this.hasTuerOeffner = false;\n              this.logintoken = \"\";\n              this.fullusername = \"\";\n              this.shortusername = \"\";\n              this.explicitusername = \"\";\n              console.log(\"---> User loged out\");\n            });\n          }\n          /*this.churchtools.getPersonViaToken(this.personid, this.logintoken).then((res)=>{\n            console.log(\"Persondata with Token:\"+JSON.stringify(res));\n          }).catch((err)=>{\n            console.log(\"Error on getPerson with Token \"+  JSON.stringify(err));\n            this.nativeStorage.remove('currentUser');\n            this.loggedin = false;\n            this.personid = 0;\n            this.hasTuerOeffner = false;\n            this.logintoken = \"\";\n            this.fullusername = \"\";\n            this.shortusername = \"\";\n          })*/\n        });\n        //Settings auslesen\n        nativeStorage.getItem('settings').then(res => {\n          console.log('habe aus native storage settings gelesen:');\n          console.log(JSON.stringify(res.settings));\n          this.homescreen.next(res.settings);\n        }, err => {\n          console.log('settings nicht in item Storage vorhanden!');\n        });\n      });\n    }\n    userLogginSuccessful(personid) {\n      this.personid = personid;\n      this.loggedin = true;\n      console.log(\"person id: \" + personid);\n      this.churchtools.getGroupsForLoggedInPerson(personid).then(res => {\n        this.churchtools.getPersonData(personid).then(res => {\n          console.log(\"persondata:\" + JSON.stringify(JSON.parse(res.data)));\n          this.fullusername = JSON.parse(res.data).data.firstName + \" \" + JSON.parse(res.data).data.lastName;\n          //23.01.2021 - get new db fiel praycal_name\n          var tmp = JSON.parse(res.data).data.praycal_name;\n          if (tmp) {\n            console.log(\"pracal_name=\" + this.shortusername);\n            this.explicitusername = tmp;\n          }\n          var lastname = JSON.parse(res.data).data.lastName;\n          this.shortusername = JSON.parse(res.data).data.firstName + \" \" + lastname.substr(0, 1) + \".\";\n          console.log(\"shortname=\" + this.shortusername);\n          this.nativeStorage.setItem('currentUser', {\n            personid: this.personid,\n            logintoken: this.logintoken,\n            fullusername: this.fullusername,\n            hasTuerOeffner: this.hasTuerOeffner,\n            shortusername: this.shortusername,\n            explicitusername: this.explicitusername\n          }).then(() => console.log('Stored item currentUser(a)!'), error => console.error('Error storing item', error));\n        });\n        var resultObj = JSON.parse(res.data);\n        //console.log(\"Get Group for Loggedin \" +JSON.stringify(resultObj));\n        var hasZugang = false;\n        resultObj.data.forEach(group => {\n          //console.log(\"Elements \" + group.group.domainIdentifier)\n          //console.log(\"In for Each with :\" + JSON.stringify(group));\n          if (\"9\" == (group === null || group === void 0 ? void 0 : group.group.domainIdentifier)) {\n            console.log(\"has Zugang\");\n            hasZugang = true;\n            this.nativeStorage.setItem('currentUser', {\n              personid: this.personid,\n              logintoken: this.logintoken,\n              fullusername: this.fullusername,\n              hasTuerOeffner: this.hasTuerOeffner,\n              shortusername: this.shortusername,\n              explicitusername: this.explicitusername\n            }).then(() => console.log('Stored item currentUser(b)!'), error => console.error('Error storing item', error));\n          }\n        });\n        if (hasZugang) {\n          this.hasTuerOeffner = true;\n        } else {\n          this.hasTuerOeffner = false;\n        }\n        this.churchtools.getLoginToken(personid).then(res => {\n          console.log(JSON.stringify(res.data));\n          this.logintoken = JSON.parse(res.data).data;\n          console.log(\"has Logintoken\");\n          this.nativeStorage.setItem('currentUser', {\n            personid: this.personid,\n            logintoken: this.logintoken,\n            fullusername: this.fullusername,\n            hasTuerOeffner: this.hasTuerOeffner,\n            shortusername: this.shortusername,\n            explicitusername: this.explicitusername\n          }).then(() => console.log('Stored item currentUser(c)!'), error => console.error('Error storing item', error));\n        }).catch(err => {\n          console.log(\"error on retrieving logintoken\");\n          this.loggedin = false;\n          this.personid = 0;\n          this.hasTuerOeffner = false;\n          this.logintoken = \"\";\n        });\n        /*\n        this.churchtools.getLoginString(personid).then((res)=>{\n          console.log(\"loginstring=\");\n          console.log(JSON.stringify(res.data));\n          this.loginstring = JSON.parse(res.data);\n        }).catch((err)=>{\n          this.loginstring = \"\";\n        })\n        */\n        ;\n      }).catch(err => {\n        this.hasTuerOeffner = false;\n        this.logintoken = \"\";\n        console.log(\"dropped here \" + JSON.stringify(err));\n      });\n      this.nativeStorage.setItem('currentUser', {\n        personid: this.personid,\n        logintoken: this.logintoken,\n        fullusername: this.fullusername,\n        hasTuerOeffner: this.hasTuerOeffner,\n        shortusername: this.shortusername,\n        explicitusername: this.explicitusername\n      }).then(() => console.log('Stored item currentUser(d)!'), error => console.error('Error storing item', error));\n    }\n    saveHomeSettings(settings) {\n      this.homescreen.next(settings);\n      console.log('neue Settings: ', settings);\n      this.nativeStorage.setItem('settings', {\n        settings\n      }).then(() => console.log('Stored item homescreen!'), error => console.error('Error storing item', error));\n    }\n    resetHomeSettings() {\n      console.log('in userstate reset homescreen to: ');\n      //this.homescreen.next(JSON.parse(JSON.stringify(this.homescreen_default)));\n      this.homescreen.next(this.homescreen_default);\n      this.nativeStorage.remove('settings');\n    }\n    userLoggedOut() {\n      this.loggedin = false;\n      this.personid = 0;\n      this.hasTuerOeffner = false;\n      this.logintoken = \"\";\n      this.fullusername = \"\";\n      this.shortusername = \"\";\n      this.explicitusername = \"\";\n      this.nativeStorage.remove('currentUser');\n      this.nativeStorage.remove('CheckinDataStorage');\n      console.log(\"user has been logged out\");\n    }\n  }\n  UserstateService.Éµfac = function UserstateService_Factory(t) {\n    return new (t || UserstateService)(i0.ÉµÉµinject(i1.ChurchapiService), i0.ÉµÉµinject(i2.Platform), i0.ÉµÉµinject(i3.NativeStorage));\n  };\n  UserstateService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: UserstateService,\n    factory: UserstateService.Éµfac,\n    providedIn: 'root'\n  });\n  return UserstateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}