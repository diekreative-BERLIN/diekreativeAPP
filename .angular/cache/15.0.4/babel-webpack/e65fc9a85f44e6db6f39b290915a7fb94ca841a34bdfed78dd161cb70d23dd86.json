{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { MatAccordion } from '@angular/material/expansion';\nimport { GdCheckinPage } from '../gd-checkin/gd-checkin.page';\nimport { GeneralPage } from '../modals/general/general.page';\n//timezone\nimport * as moment from 'moment-timezone';\nconst MEDIA_FOLDER_NAME = 'temp_files';\nlet GottesdienstePage = class GottesdienstePage {\n  constructor(churchtools, events, platform, nativeStorage, popover, router, file, transfer, fileOpener, iab, modalController, alertController, userState) {\n    this.churchtools = churchtools;\n    this.events = events;\n    this.platform = platform;\n    this.nativeStorage = nativeStorage;\n    this.popover = popover;\n    this.router = router;\n    this.file = file;\n    this.transfer = transfer;\n    this.fileOpener = fileOpener;\n    this.iab = iab;\n    this.modalController = modalController;\n    this.alertController = alertController;\n    this.userState = userState;\n    //use of moment.js library\n    this.momentjs = moment;\n    this.fixForCurrentTimeZone = new Date().getTimezoneOffset() / -60;\n    this.isUserLoggedIn = false;\n    this.didReadNextEvent = false;\n    this.checkinActivateSpan = 2.0; //sets how many hours before event start QR checkin should be visible\n    this.SkriptAvailable = 0;\n    this.ZoomAvailable = 0;\n    this.YTAvailable = 0;\n    this.familyQRdata = [];\n    this.groupid = 183; //currently we preset groups to 'GoDi im MW'\n    this.isFakeNow = false;\n    this.AppPageGodiTimestamp = 1601000000000;\n    //AppPageGodiWeekdayNextEvent = -1;\n    this.AppPageGodiEvntStart = \"\";\n    this.AppPageGodiEvntEnd = \"\";\n    this.AppPageGodiInfoDate = \"\";\n    this.AppPageGodiInfo = \"\";\n    this.AppPageGodiInfotext = \"\";\n    //nov '22 -> no more qr checkin needed -> deactivated!\n    //AppPageGodiQRcheckin = true;\n    this.AppPageGodiQRcheckin = false;\n    this.AppPageGoDiQRcheckinCode = \"false\";\n    platform.ready().then(() => __awaiter(this, void 0, void 0, function* () {\n      console.log('platform is ready -> we are at START..');\n      let path = this.file.dataDirectory;\n      this.file.checkDir(path, MEDIA_FOLDER_NAME).then(err => {\n        this.file.createDir(path, MEDIA_FOLDER_NAME, false);\n      });\n      //getPersonID\n      this.nativeStorage.getItem('currentUser').then(user => {\n        this.personid = user.personid;\n        console.log('personID=' + this.personid);\n        this.isUserLoggedIn = true;\n      });\n      //this.groupid = 183; //currently we preset groups to 'GoDi im MW'\n      //AppPageGoDi Storage read\n      yield this.nativeStorage.getItem(\"AppPageStorage\").then(AppPg => {\n        if (AppPg) {\n          console.log('CHECK: app storage read OKAY');\n          this.AppPageGodiTimestamp = AppPg.godi_timestamp;\n          this.AppPageGodiEvntStart = AppPg.godi_start;\n          this.AppPageGodiEvntEnd = AppPg.godi_end;\n          this.AppPageGodiInfoDate = AppPg.godi_infodate;\n          this.AppPageGodiInfo = AppPg.godi_info;\n          this.AppPageGodiInfotext = AppPg.godi_infotext;\n          console.log(\"-> godi qrcheckin: \" + AppPg.godi_qrcheckin);\n          //console.log(\"qrcode=\"+AppPg.godi_qrcheckincode);\n          //2021-03-31 check if QR checkin is activated for Motorwerk GoDi\n          if (AppPg.godi_qrcheckin == \"false\") {\n            console.log('@Init QR Checkin false.. should it not be true? goto check!!');\n            this.getGoDiEventDetails();\n          }\n          /*\n          this.AppPageGoDiQRcheckinCode = AppPg.godi_qrcheckincode;\n          this.familyQRdata = AppPg.godi_qrcheckincode; //also store here because we need this info if we do checkin()\n          if (this.AppPageGoDiQRcheckinCode == '' || this.isUserLoggedIn == false) {this.AppPageGoDiQRcheckinCode = \"false\"}\n          */\n          console.log('infos from AppStorage: timestamp:' + this.AppPageGodiTimestamp + ' Startzeit:' + this.AppPageGodiEvntStart + ' Ende:' + this.AppPageGodiEvntEnd + ' InfoDate:' + this.AppPageGodiInfoDate + ' AppPageGodiInfo:' + this.AppPageGodiInfo + ' AppPageGodiInfotext=' + this.AppPageGodiInfotext + ' AppPageGodiQRcheckin:' + this.AppPageGodiQRcheckin);\n          console.log('now setup things');\n          this.setUpThings();\n        } else {\n          console.log('CHECK: app storage read NOT POSSIBLE');\n          this.setTimeStamp();\n          this.AppPageGodiTimestamp = this.timestampLocal;\n          this.getNextGoDiEvents(0);\n          this.getGoDiEventDetails();\n          /*\n          if(this.AppPageGodiQRcheckin) {\n            this.getQRCodesForFamily(2);\n            //this.getQRCode(this.personid, this.groupid);\n          }\n          */\n        }\n      }, error => {\n        console.log('CHECK: app storage read ERROR');\n        this.setTimeStamp();\n        this.AppPageGodiTimestamp = this.timestampLocal;\n        this.getNextGoDiEvents(0);\n        this.getGoDiEventDetails();\n        /*\n        if(this.AppPageGodiQRcheckin) {\n          this.getQRCodesForFamily(3);\n          //this.getQRCode(this.personid, this.groupid);\n        }\n        */\n      });\n\n      console.log('is user loged in: ' + this.isUserLoggedIn);\n      if (this.isUserLoggedIn) {\n        this.readFromCheckinData();\n      }\n    }));\n    //this.platform.backButton.subscribeWithPriority(10, () => {\n    //  this.router.navigate([\"/tabs/tab1\"]);\n    //});\n  }\n\n  readFromCheckinData() {\n    //GodiCheckin Storage\n    this.nativeStorage.getItem('CheckinDataStorage').then(GodiCheck => {\n      if (GodiCheck) {\n        console.log('CHECK: app storage GoDiCheck read OKAY');\n        console.log(\"qrcode=\" + GodiCheck.godi_qrcheckincode);\n        this.AppPageGoDiQRcheckinCode = GodiCheck.godi_qrcheckincode;\n        this.familyQRdata = GodiCheck.godi_qrcheckincode; //also store here because we need this info if we do checkin()\n        if (this.AppPageGoDiQRcheckinCode == '' || this.isUserLoggedIn == false) {\n          this.AppPageGoDiQRcheckinCode = \"false\";\n        }\n        console.log('infos from GodiCheck: AppPageGodiQRcheckin:' + this.AppPageGodiQRcheckin + ' AppPageGoDiQRcheckinCode:' + this.AppPageGoDiQRcheckinCode);\n      } else {\n        console.log('CHECK: app storage GoDiCheck read NOT POSSIBLE');\n        if (this.AppPageGodiQRcheckin) {\n          this.getQRCodesForFamily(2);\n        }\n      }\n    }, error => {\n      console.log('CHECK: app storage GoDiCheck read ERROR');\n      if (this.AppPageGodiQRcheckin) {\n        this.getQRCodesForFamily(3);\n      }\n    });\n  }\n  //detect doublicated values - taken from https://stackoverflow.com/questions/59562502/how-to-find-duplicates-from-list-of-array-in-angular-6-using-some\n  uniqueData(array, key) {\n    // create new objects for use\n    var uniqueArray = [];\n    var map = new Map();\n    // loop through the array\n    array.forEach((user, index) => {\n      //check if the key already exists if exists do not push else push\n      if (!map.get(user[key])) {\n        map.set(user[key], user[key]);\n        uniqueArray.push(user);\n      }\n    });\n    return uniqueArray;\n  }\n  /*\n  * checkin button clicked -> prepare infos and then show QR code(s)\n  */\n  checkin() {\n    return __awaiter(this, void 0, void 0, function* () {\n      //1. Daten bereinigen\n      //var daten = this.uniqueData(this.familyQRdata, 'personid');\n      var daten = this.familyQRdata;\n      //var daten = this.familyQRdata;\n      //2. Ablaufdaten auslesen und Gueltigkeit bestimmen\n      this.momentjs.tz.setDefault('Europe/Berlin');\n      let timestampLocal = this.momentjs().format(\"X\");\n      let ablauf;\n      let is3gok;\n      let checkinQRitems = [];\n      let saveUpdatedCodes = false;\n      console.log('id | name | qrcode | validity | is3gok ');\n      for (let zeile of daten) {\n        console.log(zeile.personid + \"|\" + zeile.name + \"|\" + zeile.qrcode + \"|\" + zeile.validity);\n        ablauf = this.momentjs(zeile.validity).format(\"X\");\n        is3gok = false;\n        if (timestampLocal < ablauf && ablauf != 'Invalid date') {\n          //console.log('validity ist okay ('+timestampLocal+' < '+zeile.validity+' ('+this.momentjs(zeile.validity).format(\"X\")+'))');\n          is3gok = true;\n        } else {\n          //query new validity (but only if we're online)\n          if (this.userState.isOnline) {\n            //get validity from db and compare wit timestamp !!with async/await!!\n            yield this.churchtools.getCheckValidity(zeile.personid).then(result => {\n              ablauf = this.momentjs(JSON.stringify(JSON.parse(result.data)), \"YYYYMMDD H:mm:ss\").format(\"X\");\n              //console.log('validity neu ausgelesen: '+ablauf);\n              if (timestampLocal < ablauf && ablauf != 'Invalid date') {\n                is3gok = true;\n                saveUpdatedCodes = true;\n              }\n            });\n          }\n        }\n        //save to items\n        let item = [{\n          \"name\": \"\",\n          \"qrcode\": \"\",\n          \"is3gok\": false\n        }];\n        item[0].name = zeile.name;\n        item[0].qrcode = zeile.qrcode + \"/\" + zeile.personid + \"/\" + this.groupid;\n        item[0].is3gok = is3gok;\n        checkinQRitems.push(item[0]);\n      }\n      if (saveUpdatedCodes) {\n        this.familyQRdata = checkinQRitems;\n        this.saveCheckinCodes();\n      }\n      //zum testen.. checkinQRitems = [{\"name\":\"Marc\",\"qrcode\":\"abc\", \"is3gok\":true}];\n      console.log('nun haben wir folgende Werte:');\n      console.log(checkinQRitems);\n      yield this.popover.create({\n        component: GdCheckinPage,\n        componentProps: {\n          QRFamilyData: checkinQRitems,\n          QRGroupID: this.groupid\n        },\n        cssClass: 'modal_qr_popover',\n        backdropDismiss: true,\n        showBackdrop: false\n      }).then(popoverElement => {\n        popoverElement.onDidDismiss().then(ret => {\n          if (JSON.parse(JSON.stringify(ret)).data == \"reload_family\") {\n            //console.log('neu Family code einelsen');\n            this.getQRCodesForFamily(0);\n          }\n        });\n        popoverElement.present();\n      });\n    });\n  }\n  //save GoDi Info\n  saveGoDiInfo() {\n    console.log('>>>>>> SAVE!!! saveGoDiInfo: godi_timestamp: ' + this.AppPageGodiTimestamp + ', godi_start:' + this.AppPageGodiEvntStart + ', godi_end:' + this.AppPageGodiEvntEnd + ', godi_infodate: ' + this.AppPageGodiInfoDate + ', godi_info: ' + this.AppPageGodiInfo + ', godi_infotext: ' + this.AppPageGodiInfotext + ', godi_qrcheckin: ' + this.AppPageGodiQRcheckin);\n    this.nativeStorage.setItem('AppPageStorage', {\n      godi_timestamp: this.AppPageGodiTimestamp,\n      godi_start: this.AppPageGodiEvntStart,\n      godi_end: this.AppPageGodiEvntEnd,\n      godi_infodate: this.AppPageGodiInfoDate,\n      godi_info: this.AppPageGodiInfo,\n      godi_infotext: this.AppPageGodiInfotext,\n      godi_qrcheckin: this.AppPageGodiQRcheckin\n    }).then(() => console.log('Stored AppPageStorage item!'), error => console.error('Error storing AppPageStorage item', error));\n  }\n  saveCheckinCodes() {\n    console.log('>>>>>> SAVE!!! : godi_qrcheckincode: ' + this.familyQRdata);\n    this.nativeStorage.setItem('CheckinDataStorage', {\n      godi_qrcheckincode: this.familyQRdata\n    }).then(() => console.log('Stored CheckinDataStorage item!'), error => console.error('Error storing CheckinDataStorage item', error));\n  }\n  //read GoDi Events within next 7 days\n  getNextGoDiEvents(readNextDay) {\n    this.churchtools.getNextGoDiEvents().then(result => {\n      console.log('nextGoDi Services (readNextDay? ' + readNextDay + '): ' + JSON.stringify(result.data));\n      //let retval = JSON.parse(JSON.stringify(result)).data ;\n      //this.momentjs.tz.setDefault('Europe/Berlin');\n      let i = 0;\n      let starttime = this.momentjs(JSON.parse(result.data)[i].start * 1000).subtract(this.fixForCurrentTimeZone, 'h');\n      //get next Event > consider if result still holds current event - if so, then read next id.\n      if (readNextDay > 0) {\n        if (this.momentjs(starttime).format('YYMMDD') == this.momentjs(this.timestampLocal).format('YYMMDD')) {\n          i = 1;\n          starttime = this.momentjs(JSON.parse(result.data)[i].start * 1000).subtract(this.fixForCurrentTimeZone, 'h');\n        }\n      }\n      let endtime = this.momentjs(JSON.parse(result.data)[i].ende * 1000).subtract(this.fixForCurrentTimeZone, 'h');\n      this.AppPageGodiEvntStart = starttime;\n      this.AppPageGodiEvntEnd = endtime;\n      let infotext = JSON.parse(result.data)[i].notes;\n      let infodate = this.momentjs(starttime).format('DD.MM.YYYY');\n      let info = this.momentjs(starttime).format('HH:mm') + ' Uhr, ' + JSON.parse(result.data)[i].bezeichng;\n      //this.AppPageGodiWeekdayNextEvent = this.momentjs( starttime ).format('d') ;\n      console.log('weekday next event = ' + this.momentjs(starttime).format('d') + ' Date: ' + info + '  (start:' + starttime + ' , end:' + endtime + ')');\n      this.AppPageGodiInfoDate = infodate;\n      this.AppPageGodiInfo = info;\n      this.AppPageGodiInfotext = infotext;\n      console.log('infos nun da??? ' + this.AppPageGodiInfotext);\n      //todo: muss aber bei QR Code nochmal gespeichert werden..\n      this.saveGoDiInfo();\n    });\n  }\n  //read details for Event - especially if event has qr checkin code activated\n  getGoDiEventDetails() {\n    this.churchtools.getGoDiEventDetails(this.groupid).then(result => {\n      console.log(\"GoDi Event Info:\" + JSON.stringify(JSON.parse(result.data)));\n      //nov '22 - no more needed!\n      //this.AppPageGodiQRcheckin = (JSON.parse(result.data)).data.settings.qrCodeCheckin;\n      this.AppPageGodiQRcheckin = false;\n      //console.log('qr checkin? '+this.AppPageGodiQRcheckin);\n    });\n  }\n  //check if person is in Group\n  //not needed - if Person is not in Group, we get an error with getQRCode. That's enough information that we need\n  checkPersonInGroup() {\n    console.log('check person ' + this.personid + ' in group?');\n    this.churchtools.checkPersonInGroup(this.personid).then(result => {\n      //console.log(\"check person:\" +JSON.stringify(JSON.parse(result.data)));\n      let daten = JSON.parse(result.data)[0].group.domainIdentifier;\n      console.log('daten: ' + daten);\n      //let daten = (JSON.parse(result.data));\n      //console.log('len=' + (JSON.parse(result.data)).length );\n      //console.log('for in daten..');\n      //for (var data of (JSON.stringify(result.data))) {\n      //console.log('loop: '+data);\n      //group.domainIdentifier\n      //console.log(data);\n      //}\n    });\n  }\n  //getQRCode for Person\n  /*\n  public getQRCode(personID, groupID) {\n    console.log('in get qr code.. for person '+personID);\n    this.churchtools.getQRCode(personID, groupID).then((result)=>{\n      //console.log('res='+result);\n      console.log('qrcode: '+JSON.parse(JSON.stringify(JSON.parse(result.data))).data.token );\n        this.AppPageGoDiQRcheckinCode = (JSON.parse(result.data)).data.token + '/' + personID + '/' + groupID;\n        //qr code mit dazu sichern\n        this.saveGoDiInfo();\n    }).catch((err)=>{\n      console.log(\"Error getting qrcode\"+JSON.stringify(err));\n        this.AppPageGoDiQRcheckinCode = \"false\";\n    })\n  }\n  */\n  //getQRCodes for Person and his/her relatives\n  getQRCodesForFamily_old(number) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log('get qr code for whole family..' + number);\n      this.familyQRdata = [];\n      let tempFamilyData = [];\n      //console.log(this.familyQRdata);\n      let zeile = [{\n        \"personid\": \"\",\n        \"name\": \"\",\n        \"qrcode\": \"\",\n        \"validity\": \"\"\n      }];\n      // \"is3gok\":false}];\n      //let ablauf = this.momentjs('2021-11-13T09:50:00Z').subtract(this.fixForCurrentTimeZone, 'h');\n      //console.log('ablaufdatum = ' + ablauf.format('DD.MM.YYYY HH:mm'));\n      //console.log('ohne format='+ablauf);\n      console.log('lies für person id ' + this.personid);\n      //1. add current person to array\n      zeile[0].personid = this.personid;\n      zeile[0].name = this.userState.fullusername;\n      //zeile[0].qrcode=this.AppPageGoDiQRcheckinCode;\n      yield this.churchtools.getQRCode(this.personid, this.groupid).then(result => {\n        let tempdata = JSON.parse(JSON.stringify(JSON.parse(result.data))).data.token;\n        console.log('2) qrcode wert: ' + tempdata);\n        zeile[0].qrcode = tempdata;\n        tempFamilyData.push(zeile[0]);\n      }).catch(err => {\n        console.log(\"Error getting qrcode\" + JSON.stringify(err));\n        this.AppPageGoDiQRcheckinCode = \"false\";\n      });\n      //2. add relatives to array\n      yield this.churchtools.getRelationships(this.personid).then(result => {\n        //console.log('relationships: '+JSON.stringify(result));\n        //console.log('einzeln A: '+JSON.stringify(JSON.parse(result.data)) );\n        let daten = JSON.parse(result.data);\n        for (var i = 0; i < daten.data.length; i++) {\n          let zeile = [{\n            \"personid\": \"\",\n            \"name\": \"\",\n            \"qrcode\": \"\",\n            \"validity\": \"\"\n          }];\n          zeile[0].personid = daten.data[i].relative.domainIdentifier;\n          zeile[0].name = daten.data[i].relative.title;\n          //save Data\n          tempFamilyData.push(zeile[0]);\n        }\n      });\n      console.log(\"beim auslesen direkt:\");\n      console.log(tempFamilyData);\n      console.log('tempFamilyData length=' + tempFamilyData.length);\n      //3. add QR code where info is missing\n      for (var i = 0; i < tempFamilyData.length; i++) {\n        console.log('qrcode? \"' + tempFamilyData[i].qrcode + '\" personid=' + tempFamilyData[i].personid + ' groupid=' + this.groupid);\n        if (tempFamilyData[i].qrcode == '') {\n          console.log('okay emtpy code -> query!');\n          yield this.churchtools.getQRCode(tempFamilyData[i].personid, this.groupid).then(result => {\n            let tempdata = JSON.parse(JSON.stringify(JSON.parse(result.data))).data.token;\n            console.log('4missing) qrcode wert: ' + tempdata);\n            tempFamilyData[i].qrcode = tempdata;\n          }).catch(err => {\n            console.log(\"4)Error getting qrcode\" + JSON.stringify(err));\n          });\n        }\n      }\n      console.log(\"mit QR Code bei Relatives ergänzt:\");\n      console.log(tempFamilyData);\n      //4. loop through current tempFamilyData and get validity for entries which have a valid qrcode\n      for (var i = 0; i < tempFamilyData.length; i++) {\n        if (tempFamilyData[i].qrcode != '') {\n          let ablauf = '';\n          yield this.churchtools.getCheckValidity(tempFamilyData[i].personid).then(result => {\n            ablauf = this.momentjs(JSON.stringify(JSON.parse(result.data)), \"YYYYMMDD H:mm:ss\").format(\"X\");\n            tempFamilyData[i].validity = ablauf;\n          });\n          this.familyQRdata.push(tempFamilyData[i]);\n        }\n      }\n      this.saveCheckinCodes();\n    });\n  }\n  //getQRCodes for Person and his/her relatives through our own API function -> delivers complete data including qrcode and validity\n  getQRCodesForFamily(number) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log('get qr code for whole family..' + number + ' (personID ' + this.personid + ', groupID ' + this.groupid + ')');\n      this.familyQRdata = [];\n      yield this.churchtools.getFamilyQRcodes(this.personid, this.groupid).then(result => {\n        console.log(result);\n        let tempdata = JSON.parse(JSON.stringify(JSON.parse(result.data)));\n        this.familyQRdata = tempdata;\n        this.saveCheckinCodes();\n      }).catch(err => {\n        console.log(\"Error getting FamilyQRcode\" + JSON.stringify(err));\n        this.AppPageGoDiQRcheckinCode = \"false\";\n      });\n    });\n  }\n  /**\n   * we get here every time, the GodiPage is entered and AppPage Infos are read from storage\n   * what happens here?\n   * 1. if current day = day where the upcoming event happens\n   *    NO:  set isGodiToday=0 and leave page with infos as it is\n   *    YES: set isGodiToday=1\n   *         and check if current time within Event timeframe (1/2hr before start until end)\n   *         if YES: set eventProgressState=0 (x min before start) or 1, if NO: before? set eventProgressState=-1, after? set eventProgressState=2\n  **/\n  setUpThings() {\n    console.log('>>>> in SetupThings<<<< (eventStart:' + this.AppPageGodiEvntStart + ')');\n    if (this.AppPageGodiEvntStart == undefined) {\n      this.AppPageGodiTimestamp = 12345;\n    }\n    //set local timestamp\n    this.setTimeStamp();\n    this.Weekday = this.momentjs(this.timestampLocal).format('d');\n    let Hour = this.momentjs(this.timestampLocal).format('H') * 1.0 + this.momentjs(this.timestampLocal).format('m') / 60;\n    //last timestamp same day?\n    if (this.momentjs(this.AppPageGodiTimestamp).format('YYMMDD') != this.momentjs(this.timestampLocal).format('YYMMDD')) {\n      //alert('different timestamp -> read from CT');\n      //different read timestamp!\n      console.log('last timestamp ' + this.momentjs(this.AppPageGodiTimestamp).format('YYMMDD') + ' is not same date as now ' + this.momentjs(this.timestampLocal).format('YYMMDD'));\n      //set new timestamp in db\n      this.AppPageGodiTimestamp = this.timestampLocal;\n      //read GoDi Info\n      this.getNextGoDiEvents(0);\n      this.didReadNextEvent = false;\n    }\n    let evnt_day = this.momentjs(this.AppPageGodiEvntStart).format('d');\n    let evnt_hour = this.momentjs(this.AppPageGodiEvntStart).format('H') * 1.0 + this.momentjs(this.AppPageGodiEvntStart).format('m') / 60;\n    let evnt_end = this.momentjs(this.AppPageGodiEvntEnd).format('H') * 1.0 + this.momentjs(this.AppPageGodiEvntEnd).format('m') / 60;\n    //1. check: is church service today?\n    console.log('Event:  Tag=' + evnt_day + ' Zeit=' + evnt_hour);\n    console.log('Aktuell Tag=' + this.Weekday + ' Zeit=' + Hour);\n    //1. if current day = day where the upcoming event happens?\n    if (this.Weekday == evnt_day) {\n      clearTimeout(this.timeout);\n      this.isGodiToday = 1;\n      if (Hour < evnt_hour - this.checkinActivateSpan) {\n        this.eventProgressState = -1;\n        this.setTimeout2Actualize(evnt_hour - this.checkinActivateSpan - Hour);\n      } else if (Hour >= evnt_hour - this.checkinActivateSpan && Hour < evnt_end) {\n        this.eventProgressState = 0;\n        if (Hour >= evnt_hour) {\n          this.eventProgressState = 1;\n          this.setTimeout2Actualize(evnt_end - Hour);\n        } else {\n          this.setTimeout2Actualize(evnt_hour - Hour);\n        }\n      } else {\n        this.eventProgressState = 2;\n      }\n    } else {\n      this.isGodiToday = 0;\n      this.eventProgressState = '';\n    }\n    //temp\n    /*\n    if (this.AppPageGodiQRcheckin) {\n      this.getQRCodesForFamily(7);\n      //console.log('now familyQRData:');\n      //console.log(this.familyQRdata);\n    }\n    */\n    console.log('isGodiToday=' + this.isGodiToday + ' eventProgressState=' + this.eventProgressState);\n    if (this.isGodiToday == 1) {\n      if (this.eventProgressState == 0 || this.eventProgressState == 1) {\n        if (this.AppPageGoDiQRcheckinCode == \"false\" && this.AppPageGodiQRcheckin) {\n          this.getQRCodesForFamily(1);\n          //this.getQRCode(this.personid, this.groupid);\n        }\n\n        if (this.eventProgressState == 1) {\n          if (this.ZoomAvailable == 0 || this.YTAvailable == 0 || this.SkriptAvailable == 0) {\n            console.log('hole links für schichten:');\n            this.events.getEventLinks().then(result => {\n              console.log(JSON.stringify(result.data));\n              //this.items = JSON.parse(result.data);\n              this.SkriptLink = JSON.parse(result.data).skript; //here we get also the script link\n              let EventLinkDate = JSON.parse(result.data).date;\n              console.log('Datum für next Link:' + EventLinkDate + ' (mit Format=' + moment(EventLinkDate, 'DD.MM.YYYY').format('YYMMDD') + ') GoDi Event=' + this.momentjs(this.AppPageGodiEvntStart).format('YYMMDD'));\n              //only show zoom and YT link for the current Event\n              if (moment(EventLinkDate, 'DD.MM.YYYY').format('YYMMDD') == this.momentjs(this.AppPageGodiEvntStart).format('YYMMDD')) {\n                this.ZoomLink = JSON.parse(result.data).zoom;\n                this.YTLink = JSON.parse(result.data).youtube;\n                console.log('ZoomLink=' + this.ZoomLink);\n                console.log('YTLink=' + this.YTLink);\n                if (this.ZoomLink == 'n/a') {\n                  this.ZoomAvailable = -1;\n                } else {\n                  this.ZoomAvailable = 1;\n                }\n                if (this.YTLink == 'n/a') {\n                  this.YTAvailable = -1;\n                } else {\n                  this.YTAvailable = 1;\n                }\n              } else {\n                this.ZoomAvailable = -1;\n                this.YTAvailable = -1;\n              }\n              console.log('try to download skript from ' + this.SkriptLink);\n              //'https://dkskript.000webhostapp.com/predigtskript/predigt.pdf'\n              let url = encodeURI(this.SkriptLink);\n              //here initializing object. \n              this.fileTransfer = this.transfer.create();\n              // here iam mentioned this line this.file.externalRootDirectory is a native pre-defined file path storage. You can change a file path whatever pre-defined method.  \n              this.fileTransfer.download(url, this.file.dataDirectory + MEDIA_FOLDER_NAME + '/' + 'skript.pdf', true).then(entry => {\n                //here logging our success downloaded file path in mobile.  \n                console.log('download completed: ' + entry.toURL());\n                this.SkriptPathLocal = entry.toURL();\n                this.SkriptAvailable = 1;\n              }, error => {\n                //here logging our error its easier to find out what type of error occured.  \n                console.log('download failed: ' + error);\n                this.SkriptAvailable = -1;\n              });\n            });\n          }\n        }\n      } else if (this.eventProgressState > 1) {\n        if (!this.didReadNextEvent) {\n          this.getNextGoDiEvents(1);\n          this.didReadNextEvent = true;\n        }\n      }\n    }\n  }\n  setTimeStamp() {\n    if (!this.isFakeNow) {\n      this.momentjs.tz.setDefault('Europe/Berlin');\n      this.timestampLocal = this.momentjs();\n    }\n  }\n  //set timer - if we do not leave page - auto actualize when event starts or ends\n  setTimeout2Actualize(timeoutHour) {\n    console.log('>timeout: ' + timeoutHour);\n    let timeoutMs = timeoutHour * 3600000 + 1500;\n    this.timeout = setTimeout(() => {\n      this.setUpThings();\n    }, timeoutMs);\n  }\n  showGoDiDetails(infoQR) {\n    //replace('\\n\\r', '<br/>').replace('\\n', '<br/>').replace('\\r', '<br/>')\n    let message = this.AppPageGodiInfotext;\n    if (infoQR && this.AppPageGodiQRcheckin) {\n      message = message + '\\n\\nQR Checkin steht ab ' + this.momentjs(this.AppPageGodiEvntStart).subtract(this.checkinActivateSpan, 'hours').format('DD.MM. HH:mm') + ' Uhr zur Verfügung';\n    }\n    alert(message);\n    /*\n    this.alertController.create({\n      header: 'Info',\n      cssClass:'alert-class',\n      message: message.replace('\\n', '<br/>'),\n      buttons: [\n        {\n          text: 'Ok'\n        }\n      ],\n    }).then(res => {\n      res.present();\n    });\n    */\n  }\n  /*\n  * detect needed updates when we enter GoDi Page without App restart\n  */\n  ionViewDidEnter() {\n    console.log('----> ionViewDidEnter: isUserLoggedIn=' + this.isUserLoggedIn + ' (qrcode: ' + this.AppPageGoDiQRcheckinCode + ')' + ' GodiToday?' + this.isGodiToday);\n    //if we were already on godi page and then have logged in, then we need to set the corresponding infos\n    if (!this.isUserLoggedIn) {\n      this.nativeStorage.getItem('currentUser').then(user => {\n        this.personid = user.personid;\n        console.log('personID=' + this.personid);\n        this.isUserLoggedIn = true;\n      });\n      if (this.isUserLoggedIn) {\n        this.readFromCheckinData();\n      }\n    }\n    this.setTimeStamp();\n    console.log('timestamp saved: ' + this.momentjs(this.AppPageGodiTimestamp).format('YYMMDD') + ' und jetzt:' + this.momentjs(this.timestampLocal).format('YYMMDD'));\n    //this.AppPageGoDiQRcheckinCode\n    //2021-03-29 always go through setup things - else some things are not actualized..\n    this.setUpThings();\n    /*\n    if (this.momentjs( this.AppPageGodiTimestamp ).format('YYMMDD') != this.momentjs( this.timestampLocal ).format('YYMMDD')) {\n      //we have a new day - read new data\n      console.log('ivde: timestamp differs -> gotoSetup');\n      this.setUpThings();\n    } else if (this.isGodiToday) {\n      //if we are at event day pass through setUpThings each time we enter the page (as we have to react on time changes)\n      console.log('ivde: godi today -> gotoSetup anyway');\n      this.setUpThings();\n    } else if (this.AppPageGodiQRcheckin && !this.isUserLoggedIn) {\n      //this occurs if user has just logged in - need to read QR code\n      this.nativeStorage.getItem('currentUser').then((user)=>{\n        this.personid = user.personid;\n        console.log('Yes - logged in!! personID='+this.personid);\n        this.isUserLoggedIn = true;\n        this.getQRCode(this.personid, this.groupid);\n      });\n      \n    }\n    */\n  }\n\n  ionViewWillLeave() {\n    console.log('clear timeout');\n    clearTimeout(this.timeout);\n  }\n  //display Skript with fileopener\n  showSkript() {\n    this.fileOpener.open(this.SkriptPathLocal, \"application/pdf\").then(() => console.log(\"File is opened\")).catch(e => console.log(\"Error opening file\", e));\n  }\n  launchZoomMeeting1() {\n    console.log(\"launch Zoom Meeting with:\");\n    console.log(this.ZoomLink);\n    this.openWebsite(this.ZoomLink);\n  }\n  launchZoomMeeting2() {\n    return __awaiter(this, void 0, void 0, function* () {\n      //depreceated\n      //let url = 'zoomus://zoom.us/join?confno=81114830864&pwd=N2JBaWgyMjhod0YwcUg3K0lqNlRGUT09&zc';\n      const modal = yield this.modalController.create({\n        component: GeneralPage,\n        componentProps: {\n          \"paramTitle\": 'english translation',\n          \"paramText\": 'english translation is provided within the Zoom App. Please watch the the short screencast below to learn how to switch to the english translation within zoom and then confirm with the Okay button below the screencast.',\n          \"paramShowHowto\": true\n        }\n      });\n      yield modal.present();\n      yield modal.onDidDismiss();\n      console.log(\"launch Zoom Meeting with:\");\n      console.log(this.ZoomLink);\n      this.openWebsite(this.ZoomLink);\n    });\n  }\n  launchYTlive() {\n    console.log(\"launch Youtube with:\");\n    console.log(this.YTLink);\n    this.openWebsite(this.YTLink);\n  }\n  openWebsite(url) {\n    this.platform.ready().then(() => {\n      this.iab.create(url, '_system');\n    });\n  }\n  openModal(modalTitle, modalText, modalShowZoomHowto) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const modal = yield this.modalController.create({\n        component: GeneralPage,\n        componentProps: {\n          \"paramTitle\": modalTitle,\n          \"paramText\": modalText,\n          \"paramShowHowto\": modalShowZoomHowto\n        }\n      });\n      modal.onDidDismiss().then(dataReturned => {\n        if (dataReturned !== null) {\n          this.modalDataReturned = dataReturned.data;\n          //alert('Modal Sent Data :'+ dataReturned);\n        }\n      });\n\n      return yield modal.present();\n    });\n  }\n  helpZoom() {\n    this.openModal('Gottesdienst per Zoom', 'zum Mithören vor Ort via Zoom.\\n\\nZoom hat nur eine geringe zeitliche Verzögerung und eignet sich somit gut zum Mithören des Gottesdienstes vor Ort vom eigenen Smartphone aus.\\nFür den Empfang von Bild und Ton muss die kostenlose Zoom App auf dem Smarthpone installiert sein. Zudem empfiehlt sich eine WLAN Verbindung zu nutzen um das Datenvolumen zu schonen.\\n\\nFür weitere Infos sprich bitte die Info an.\\n\\n~~~~~ english ~~~~~\\nFor english speaking guests we provide a live translation over zoom.\\nPlease make sure that you have installed the zoom client on your smartphone (free of charge) and have enough mobile data (or use WiFi) before clicking the \"english\" button.\\nAs soon as zoom starts up, you will be able to choose the english translation channel.\\nFeel free to contact our info desk for more information.', false);\n  }\n  helpYT() {\n    this.openModal('YouTube Livestream', 'Öffnet den aktuellen Livestream in YouTube\\n\\nDas ist der bevorzugte Weg, um von zuhause aus an der aktuellen Veranstaltung teilzunehmen.', false);\n  }\n  doRefresh(event) {\n    console.log('Refresh...');\n    if (event) {\n      this.ionViewDidEnter();\n      event.target.complete();\n    }\n  }\n  //temp\n  reset() {\n    this.AppPageGodiTimestamp = 12345; //reset\n    this.nativeStorage.remove('AppPageStorage');\n    this.nativeStorage.remove('CheckinDataStorage');\n    console.log('made a reset');\n  }\n  //temp\n  check() {\n    this.nativeStorage.getItem('AppPageStorage').then(AppPg => {\n      console.log('Check Infos from AppStorage: timestamp:' + AppPg.godi_timestamp + ' InfoDate:' + AppPg.godi_infodate + ' AppPageGodiInfo:' + AppPg.godi_info + ' AppPageGodiInfotext=' + AppPg.godi_infotext + ', AppPageGodiQRcheckin=' + AppPg.godi_qrcheckin);\n    });\n    this.nativeStorage.getItem('CheckinDataStorage').then(GodiCheck => {\n      console.log('GoDi Checkin Infos:');\n      console.log(GodiCheck);\n    });\n    this.nativeStorage.getItem('currentUser').then(currentUser => {\n      console.log('currentUser Infos:');\n      console.log(currentUser);\n    });\n  }\n  //temp\n  fakeTimestamp() {\n    this.AppPageGodiTimestamp = 1234;\n    this.saveGoDiInfo();\n  }\n  setFakeNow() {\n    this.timestampLocal = this.fakeNow;\n    console.log('just set fake Timestamp: ' + this.fakeNow);\n    this.isFakeNow = true;\n  }\n};\n__decorate([ViewChild(MatAccordion)], GottesdienstePage.prototype, \"accordion\", void 0);\nGottesdienstePage = __decorate([Component({\n  selector: 'app-gottesdienste',\n  templateUrl: './gottesdienste.page.html',\n  styleUrls: ['./gottesdienste.page.scss']\n})], GottesdienstePage);\nexport { GottesdienstePage };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}