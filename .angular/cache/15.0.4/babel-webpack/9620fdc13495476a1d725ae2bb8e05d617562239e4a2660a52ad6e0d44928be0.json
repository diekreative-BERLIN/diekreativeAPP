{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar Deeplinks = /** @class */function (_super) {\n  __extends(Deeplinks, _super);\n  function Deeplinks() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  Deeplinks.prototype.route = function (paths) {\n    return cordova(this, \"route\", {\n      \"observable\": true\n    }, arguments);\n  };\n  Deeplinks.prototype.routeWithNavController = function (navController, paths, options) {\n    return cordova(this, \"routeWithNavController\", {\n      \"observable\": true\n    }, arguments);\n  };\n  Deeplinks.pluginName = \"Deeplinks\";\n  Deeplinks.plugin = \"ionic-plugin-deeplinks\";\n  Deeplinks.pluginRef = \"IonicDeeplink\";\n  Deeplinks.repo = \"https://github.com/ionic-team/ionic-plugin-deeplinks\";\n  Deeplinks.install = \"ionic cordova plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/\";\n  Deeplinks.installVariables = [\"URL_SCHEME\", \"DEEPLINK_SCHEME\", \"DEEPLINK_HOST\", \"ANDROID_PATH_PREFIX\"];\n  Deeplinks.platforms = [\"Android\", \"Browser\", \"iOS\"];\n  Deeplinks.ɵfac = /*@__PURE__*/function () {\n    var ɵDeeplinks_BaseFactory;\n    return function Deeplinks_Factory(t) {\n      return (ɵDeeplinks_BaseFactory || (ɵDeeplinks_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(Deeplinks)))(t || Deeplinks);\n    };\n  }();\n  Deeplinks.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Deeplinks,\n    factory: function (t) {\n      return Deeplinks.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return Deeplinks;\n}(IonicNativePlugin);\nexport { Deeplinks };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvZGVlcGxpbmtzL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7O0FBQ2xDO0FBR1csSUF5Rm9CLDZCQUFpQjtBQUFDO0FBRTlCO0FBRUk7QUFBTSxJQVUzQix5QkFBSyxhQUFDLEtBQVU7QUFNSixJQXVCWiwwQ0FBc0IsYUFBQyxhQUFrQixFQUFFLEtBQVUsRUFBRSxPQUF5QjtBQUl6QztBQUF3QztBQUFpRDtBQUEyQztBQUE2RTtBQUE4TTtBQUE0Rzs2Q0FoRG5qQixVQUFVOzs7OzBCQUNMO0FBQUMsb0JBL0ZQO0FBQUUsRUErRjZCLGlCQUFpQjtBQUMvQyxTQURZLFNBQVM7QUFBSSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvcmRvdmEsIElvbmljTmF0aXZlUGx1Z2luLCBQbHVnaW4gfSBmcm9tICdAaW9uaWMtbmF0aXZlL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIERlZXBsaW5rTWF0Y2gge1xuICAvKipcbiAgICogVGhlIHJvdXRlIGluZm8gZm9yIHRoZSBtYXRjaGVkIHJvdXRlXG4gICAqL1xuICAkcm91dGU6IGFueTtcblxuICAvKipcbiAgICogQW55IGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIHRocm91Z2ggcm91dGUgcGFyYW1ldGVycyBvciBHRVQgcGFyYW1ldGVyc1xuICAgKi9cbiAgJGFyZ3M6IGFueTtcblxuICAvKipcbiAgICogVGhlIGRlZXBsaW5rIG9iamVjdCBwcm9jZXNzZWQgZnJvbSB0aGUgcGx1Z2luLCBhbG9uZyB3aXRoIGFueVxuICAgKiBhbnkgaW50ZXJuYWwgbmF0aXZlIGRhdGEgYXZhaWxhYmxlIGFzIFwiZXh0cmFzXCIgYXQgdGhlIHRpbWVcbiAgICogdGhlIHJvdXRlIHdhcyBtYXRjaGVkIChmb3IgZXhhbXBsZSwgRmFjZWJvb2sgc29tZXRpbWVzIGFkZHMgZXh0cmEgZGF0YSlcbiAgICovXG4gICRsaW5rOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVlcGxpbmtPcHRpb25zIHtcbiAgLyoqXG4gICAqIFNldCB0aGUgbWF0Y2hlZCByb3V0ZSBhcyByb290IHBhZ2UgdXNpbmcgYG5hdkN0cmwuc2V0Um9vdCgpYCBtZXRob2QuXG4gICAqL1xuICByb290OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEBuYW1lIERlZXBsaW5rc1xuICogQHByZW1pZXIgZGVlcGxpbmtzXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gaGFuZGxlcyBkZWVwbGlua3Mgb24gaU9TIGFuZCBBbmRyb2lkIGZvciBib3RoIGN1c3RvbSBVUkwgc2NoZW1lIGxpbmtzXG4gKiBhbmQgVW5pdmVyc2FsIEFwcCBMaW5rcy5cbiAqXG4gKiBQbGVhc2UgcmVhZCB0aGUgW2lvbmljIHBsdWdpbiBkZWVwbGlua3MgZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2lvbmljLXRlYW0vaW9uaWMtcGx1Z2luLWRlZXBsaW5rcykgZm9yIGlPUyBhbmQgQW5kcm9pZCBpbnRlZ3JhdGlvbi5cbiAqIFlvdSBtdXN0IGFkZCBgdW5pdmVyc2FsLWxpbmtzYCB0byB5b3VyIGBjb25maWcueG1sYCBhbmQgc2V0IHVwIEFwcGxlIEFwcCBTaXRlIEFzc29jaWF0aW9uIChBQVNBKSBmb3IgaU9TIGFuZCBBc3NldCBMaW5rcyBmb3IgQW5kcm9pZC5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERlZXBsaW5rcyB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvZGVlcGxpbmtzL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBkZWVwbGlua3M6IERlZXBsaW5rcykgeyB9XG4gKlxuICogdGhpcy5kZWVwbGlua3Mucm91dGUoe1xuICogICAgICAnL2Fib3V0LXVzJzogQWJvdXRQYWdlLFxuICogICAgICAnL3VuaXZlcnNhbC1saW5rcy10ZXN0JzogQWJvdXRQYWdlLFxuICogICAgICAnL3Byb2R1Y3RzLzpwcm9kdWN0SWQnOiBQcm9kdWN0UGFnZVxuICogICAgfSkuc3Vic2NyaWJlKG1hdGNoID0+IHtcbiAqICAgICAgLy8gbWF0Y2guJHJvdXRlIC0gdGhlIHJvdXRlIHdlIG1hdGNoZWQsIHdoaWNoIGlzIHRoZSBtYXRjaGVkIGVudHJ5IGZyb20gdGhlIGFyZ3VtZW50cyB0byByb3V0ZSgpXG4gKiAgICAgIC8vIG1hdGNoLiRhcmdzIC0gdGhlIGFyZ3MgcGFzc2VkIGluIHRoZSBsaW5rXG4gKiAgICAgIC8vIG1hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgIGNvbnNvbGUubG9nKCdTdWNjZXNzZnVsbHkgbWF0Y2hlZCByb3V0ZScsIG1hdGNoKTtcbiAqICAgIH0sIG5vbWF0Y2ggPT4ge1xuICogICAgICAvLyBub21hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gKiAgICAgIGNvbnNvbGUuZXJyb3IoJ0dvdCBhIGRlZXBsaW5rIHRoYXQgZGlkblxcJ3QgbWF0Y2gnLCBub21hdGNoKTtcbiAqICAgIH0pO1xuICogYGBgXG4gKlxuICogQWx0ZXJuYXRpdmVseSwgaWYgeW91J3JlIHVzaW5nIElvbmljLCB0aGVyZSdzIGEgY29udmVuaWVuY2UgbWV0aG9kIHRoYXQgdGFrZXMgYSByZWZlcmVuY2UgdG8gYSBgTmF2Q29udHJvbGxlcmAgYW5kIGhhbmRsZXNcbiAqIHRoZSBhY3R1YWwgbmF2aWdhdGlvbiBmb3IgeW91OlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIHRoaXMuZGVlcGxpbmtzLnJvdXRlV2l0aE5hdkNvbnRyb2xsZXIodGhpcy5uYXZDb250cm9sbGVyLCB7XG4gKiAgICcvYWJvdXQtdXMnOiBBYm91dFBhZ2UsXG4gKiAgICcvcHJvZHVjdHMvOnByb2R1Y3RJZCc6IFByb2R1Y3RQYWdlXG4gKiB9KS5zdWJzY3JpYmUobWF0Y2ggPT4ge1xuICogICAgIC8vIG1hdGNoLiRyb3V0ZSAtIHRoZSByb3V0ZSB3ZSBtYXRjaGVkLCB3aGljaCBpcyB0aGUgbWF0Y2hlZCBlbnRyeSBmcm9tIHRoZSBhcmd1bWVudHMgdG8gcm91dGUoKVxuICogICAgIC8vIG1hdGNoLiRhcmdzIC0gdGhlIGFyZ3MgcGFzc2VkIGluIHRoZSBsaW5rXG4gKiAgICAgLy8gbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IG1hdGNoZWQgcm91dGUnLCBtYXRjaCk7XG4gKiAgIH0sIG5vbWF0Y2ggPT4ge1xuICogICAgIC8vIG5vbWF0Y2guJGxpbmsgLSB0aGUgZnVsbCBsaW5rIGRhdGFcbiAqICAgICBjb25zb2xlLmVycm9yKCdHb3QgYSBkZWVwbGluayB0aGF0IGRpZG5cXCd0IG1hdGNoJywgbm9tYXRjaCk7XG4gKiAgIH0pO1xuICogYGBgXG4gKlxuICogU2VlIHRoZSBbSW9uaWMgRGVlcGxpbmtzIERlbW9dKGh0dHBzOi8vZ2l0aHViLmNvbS9pb25pYy10ZWFtL2lvbmljMi1kZWVwbGlua3MtZGVtby9ibG9iL21hc3Rlci9hcHAvYXBwLnRzKSBmb3IgYW4gZXhhbXBsZSBvZiBob3cgdG9cbiAqIHJldHJpZXZlIHRoZSBgTmF2Q29udHJvbGxlcmAgcmVmZXJlbmNlIGF0IHJ1bnRpbWUuXG4gKlxuICogQGludGVyZmFjZXNcbiAqIERlZXBsaW5rTWF0Y2hcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdEZWVwbGlua3MnLFxuICBwbHVnaW46ICdpb25pYy1wbHVnaW4tZGVlcGxpbmtzJyxcbiAgcGx1Z2luUmVmOiAnSW9uaWNEZWVwbGluaycsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaW9uaWMtdGVhbS9pb25pYy1wbHVnaW4tZGVlcGxpbmtzJyxcbiAgaW5zdGFsbDpcbiAgICAnaW9uaWMgY29yZG92YSBwbHVnaW4gYWRkIGlvbmljLXBsdWdpbi1kZWVwbGlua3MgLS12YXJpYWJsZSBVUkxfU0NIRU1FPW15YXBwIC0tdmFyaWFibGUgREVFUExJTktfU0NIRU1FPWh0dHBzIC0tdmFyaWFibGUgREVFUExJTktfSE9TVD1leGFtcGxlLmNvbSAtLXZhcmlhYmxlIEFORFJPSURfUEFUSF9QUkVGSVg9LycsXG4gIGluc3RhbGxWYXJpYWJsZXM6IFsnVVJMX1NDSEVNRScsICdERUVQTElOS19TQ0hFTUUnLCAnREVFUExJTktfSE9TVCcsICdBTkRST0lEX1BBVEhfUFJFRklYJ10sXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ0Jyb3dzZXInLCAnaU9TJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZXBsaW5rcyBleHRlbmRzIElvbmljTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIERlZmluZSBhIHNldCBvZiBwYXRocyB0byBtYXRjaCBhZ2FpbnN0IGluY29taW5nIGRlZXBsaW5rcy5cbiAgICpcbiAgICogQHBhcmFtIHtwYXRoc30gcGF0aHMgRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgKiBwYXRocyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIGZvcm0geyAncGF0aCc6IGRhdGEgfS4gSWYgYSBkZWVwbGlua1xuICAgKiBtYXRjaGVzIHRoZSBwYXRoLCB0aGUgcmVzdWx0aW5nIHBhdGgtZGF0YSBwYWlyIHdpbGwgYmUgcmV0dXJuZWQgaW4gdGhlXG4gICAqIHByb21pc2UgcmVzdWx0IHdoaWNoIHlvdSBjYW4gdGhlbiB1c2UgdG8gbmF2aWdhdGUgaW4gdGhlIGFwcCBhcyB5b3Ugc2VlIGZpdC5cbiAgICogQHJldHVybnMge09ic2VydmFibGU8RGVlcGxpbmtNYXRjaD59IFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IGlzIGNhbGxlZCBlYWNoIHRpbWUgYSBkZWVwbGluayBjb21lcyB0aHJvdWdoLCBhbmRcbiAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICovXG4gIEBDb3Jkb3ZhKHtcbiAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICB9KVxuICByb3V0ZShwYXRoczogYW55KTogT2JzZXJ2YWJsZTxEZWVwbGlua01hdGNoPiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGByb3V0ZWAgdGhhdCB0YWtlcyBhIHJlZmVyZW5jZSB0byBhIE5hdkNvbnRyb2xsZXJcbiAgICogZnJvbSBJb25pYywgb3IgYSBjdXN0b20gY2xhc3MgdGhhdCBjb25mb3JtcyB0byB0aGlzIHByb3RvY29sOlxuICAgKlxuICAgKiBOYXZDb250cm9sbGVyLnB1c2ggPSBmdW5jdGlvbihWaWV3LCBQYXJhbXMpe31cbiAgICpcbiAgICogVGhpcyBoYW5kbGVyIHdpbGwgYXV0b21hdGljYWxseSBuYXZpZ2F0ZSB3aGVuIGEgcm91dGUgbWF0Y2hlcy4gSWYgeW91IG5lZWQgZmluZXItZ3JhaW5lZFxuICAgKiBjb250cm9sIG92ZXIgdGhlIGJlaGF2aW9yIG9mIGEgbWF0Y2hpbmcgZGVlcGxpbmssIHVzZSB0aGUgcGxhaW4gYHJvdXRlYCBtZXRob2QuXG4gICAqXG4gICAqIEBwYXJhbSB7TmF2fSBuYXZDb250cm9sbGVyIERlZmluZSBhIHNldCBvZiBwYXRocyB0byBtYXRjaCBhZ2FpbnN0IGluY29taW5nIGRlZXBsaW5rcy5cbiAgICogcGF0aHMgdGFrZXMgYW4gb2JqZWN0IG9mIHRoZSBmb3JtIHsgJ3BhdGgnOiBkYXRhIH0uIElmIGEgZGVlcGxpbmtcbiAgICogbWF0Y2hlcyB0aGUgcGF0aCwgdGhlIHJlc3VsdGluZyBwYXRoLWRhdGEgcGFpciB3aWxsIGJlIHJldHVybmVkIGluIHRoZVxuICAgKiBwcm9taXNlIHJlc3VsdCB3aGljaCB5b3UgY2FuIHRoZW4gdXNlIHRvIG5hdmlnYXRlIGluIHRoZSBhcHAgYXMgeW91IHNlZSBmaXQuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwYXRoc1xuICAgKlxuICAgKiBAcGFyYW0ge0RlZXBsaW5rT3B0aW9uc30gb3B0aW9uc1xuICAgKlxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxEZWVwbGlua01hdGNoPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVzb2x2ZXMgZWFjaCB0aW1lIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCwgYW5kXG4gICAqIGVycm9ycyBpZiBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2ggdGhhdCBkb2VzIG5vdCBtYXRjaCBhIGdpdmVuIHBhdGguXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgfSlcbiAgcm91dGVXaXRoTmF2Q29udHJvbGxlcihuYXZDb250cm9sbGVyOiBhbnksIHBhdGhzOiBhbnksIG9wdGlvbnM/OiBEZWVwbGlua09wdGlvbnMpOiBPYnNlcnZhYmxlPERlZXBsaW5rTWF0Y2g+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}