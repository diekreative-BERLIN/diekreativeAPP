{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar MediaCapture = /** @class */function (_super) {\n  __extends(MediaCapture, _super);\n  function MediaCapture() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  MediaCapture.prototype.captureAudio = function (options) {\n    return cordova(this, \"captureAudio\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  MediaCapture.prototype.captureImage = function (options) {\n    return cordova(this, \"captureImage\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  MediaCapture.prototype.captureVideo = function (options) {\n    return cordova(this, \"captureVideo\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n  MediaCapture.prototype.onPendingCaptureResult = function () {\n    return cordova(this, \"onPendingCaptureResult\", {\n      \"eventObservable\": true,\n      \"event\": \"pendingcaptureresult\"\n    }, arguments);\n  };\n  MediaCapture.prototype.onPendingCaptureError = function () {\n    return cordova(this, \"onPendingCaptureError\", {\n      \"eventObservable\": true,\n      \"event\": \"pendingcaptureerror\"\n    }, arguments);\n  };\n  Object.defineProperty(MediaCapture.prototype, \"supportedImageModes\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"supportedImageModes\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"supportedImageModes\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MediaCapture.prototype, \"supportedAudioModes\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"supportedAudioModes\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"supportedAudioModes\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MediaCapture.prototype, \"supportedVideoModes\", {\n    get: function () {\n      return cordovaPropertyGet(this, \"supportedVideoModes\");\n    },\n    set: function (value) {\n      cordovaPropertySet(this, \"supportedVideoModes\", value);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MediaCapture.pluginName = \"MediaCapture\";\n  MediaCapture.plugin = \"cordova-plugin-media-capture\";\n  MediaCapture.pluginRef = \"navigator.device.capture\";\n  MediaCapture.repo = \"https://github.com/apache/cordova-plugin-media-capture\";\n  MediaCapture.platforms = [\"Android\", \"Browser\", \"iOS\", \"Windows\"];\n  MediaCapture.ɵfac = /*@__PURE__*/function () {\n    var ɵMediaCapture_BaseFactory;\n    return function MediaCapture_Factory(t) {\n      return (ɵMediaCapture_BaseFactory || (ɵMediaCapture_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MediaCapture)))(t || MediaCapture);\n    };\n  }();\n  MediaCapture.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MediaCapture,\n    factory: function (t) {\n      return MediaCapture.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return MediaCapture;\n}(IonicNativePlugin);\nexport { MediaCapture };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}