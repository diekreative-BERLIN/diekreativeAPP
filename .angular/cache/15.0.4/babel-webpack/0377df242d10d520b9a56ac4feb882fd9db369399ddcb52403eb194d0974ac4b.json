{"ast":null,"code":"import * as ɵngcc0 from '@angular/core';\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Injectable } from '@angular/core';\nimport { CordovaInstance, InstanceCheck, IonicNativePlugin, Plugin, checkAvailability } from '@ionic-native/core';\n/**\n * @name File Transfer\n *\n * @description\n * This plugin allows you to upload and download files.\n *\n * @deprecated\n * This plugin has been deprecated in favor of XHR2\n * https://cordova.apache.org/blog/2017/10/18/from-filetransfer-to-xhr2.html\n *\n * @usage\n * ```typescript\n * import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer';\n * import { File } from '@ionic-native/file';\n *\n * constructor(private transfer: FileTransfer, private file: File) { }\n *\n * ...\n *\n * const fileTransfer: FileTransferObject = this.transfer.create();\n *\n * // Upload a file:\n * fileTransfer.upload(..).then(..).catch(..);\n *\n * // Download a file:\n * fileTransfer.download(..).then(..).catch(..);\n *\n * // Abort active transfer:\n * fileTransfer.abort();\n *\n * // full example\n * upload() {\n *   let options: FileUploadOptions = {\n *      fileKey: 'file',\n *      fileName: 'name.jpg',\n *      headers: {}\n *      .....\n *   }\n *\n *   fileTransfer.upload('<file path>', '<api endpoint>', options)\n *    .then((data) => {\n *      // success\n *    }, (err) => {\n *      // error\n *    })\n * }\n *\n * download() {\n *   const url = 'http://www.example.com/file.pdf';\n *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n *     console.log('download complete: ' + entry.toURL());\n *   }, (error) => {\n *     // handle error\n *   });\n * }\n *\n * ```\n *\n * To store files in a different/publicly accessible directory, please refer to the following link\n * https://github.com/apache/cordova-plugin-file#where-to-store-files\n *\n * @interfaces\n * FileUploadOptions\n * FileUploadResult\n * FileTransferError\n * @classes\n * FileTransferObject\n */\nvar FileTransfer = function (_super) {\n  __extends(FileTransfer, _super);\n  function FileTransfer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n       * Error code rejected from upload with FileTransferError\n       * Defined in FileTransferError.\n       *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n       *      INVALID_URL_ERR: 2,     Return when url was invalid\n       *      CONNECTION_ERR: 3,      Return on connection error\n       *      ABORT_ERR: 4,           Return on aborting\n       *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\n       * @enum {number}\n       */\n    _this.FileTransferErrorCode = {\n      FILE_NOT_FOUND_ERR: 1,\n      INVALID_URL_ERR: 2,\n      CONNECTION_ERR: 3,\n      ABORT_ERR: 4,\n      NOT_MODIFIED_ERR: 5\n    };\n    return _this;\n  }\n  /**\n   * Creates a new FileTransfer object\n   * @return {FileTransferObject}\n   */\n  /**\n     * Creates a new FileTransfer object\n     * @return {FileTransferObject}\n     */\n  FileTransfer.prototype.create =\n  /**\n  * Creates a new FileTransfer object\n  * @return {FileTransferObject}\n  */\n  function () {\n    return new FileTransferObject();\n  };\n  /**\n   * @name File Transfer\n   *\n   * @description\n   * This plugin allows you to upload and download files.\n   *\n   * @deprecated\n   * This plugin has been deprecated in favor of XHR2\n   * https://cordova.apache.org/blog/2017/10/18/from-filetransfer-to-xhr2.html\n   *\n   * @usage\n   * ```typescript\n   * import { FileTransfer, FileUploadOptions, FileTransferObject } from '@ionic-native/file-transfer';\n   * import { File } from '@ionic-native/file';\n   *\n   * constructor(private transfer: FileTransfer, private file: File) { }\n   *\n   * ...\n   *\n   * const fileTransfer: FileTransferObject = this.transfer.create();\n   *\n   * // Upload a file:\n   * fileTransfer.upload(..).then(..).catch(..);\n   *\n   * // Download a file:\n   * fileTransfer.download(..).then(..).catch(..);\n   *\n   * // Abort active transfer:\n   * fileTransfer.abort();\n   *\n   * // full example\n   * upload() {\n   *   let options: FileUploadOptions = {\n   *      fileKey: 'file',\n   *      fileName: 'name.jpg',\n   *      headers: {}\n   *      .....\n   *   }\n   *\n   *   fileTransfer.upload('<file path>', '<api endpoint>', options)\n   *    .then((data) => {\n   *      // success\n   *    }, (err) => {\n   *      // error\n   *    })\n   * }\n   *\n   * download() {\n   *   const url = 'http://www.example.com/file.pdf';\n   *   fileTransfer.download(url, this.file.dataDirectory + 'file.pdf').then((entry) => {\n   *     console.log('download complete: ' + entry.toURL());\n   *   }, (error) => {\n   *     // handle error\n   *   });\n   * }\n   *\n   * ```\n   *\n   * To store files in a different/publicly accessible directory, please refer to the following link\n   * https://github.com/apache/cordova-plugin-file#where-to-store-files\n   *\n   * @interfaces\n   * FileUploadOptions\n   * FileUploadResult\n   * FileTransferError\n   * @classes\n   * FileTransferObject\n   */\n  FileTransfer = __decorate([Plugin({\n    pluginName: 'FileTransfer',\n    plugin: 'cordova-plugin-file-transfer',\n    pluginRef: 'FileTransfer',\n    repo: 'https://github.com/apache/cordova-plugin-file-transfer',\n    platforms: ['Amazon Fire OS', 'Android', 'Browser', 'iOS', 'Ubuntu', 'Windows', 'Windows Phone']\n  })], FileTransfer);\n  FileTransfer.ɵfac = /*@__PURE__*/function () {\n    var ɵFileTransfer_BaseFactory;\n    return function FileTransfer_Factory(t) {\n      return (ɵFileTransfer_BaseFactory || (ɵFileTransfer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FileTransfer)))(t || FileTransfer);\n    };\n  }();\n  FileTransfer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FileTransfer,\n    factory: function (t) {\n      return FileTransfer.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return FileTransfer;\n}(IonicNativePlugin);\nexport { FileTransfer };\n/**\n * @hidden\n */\nvar FileTransferObject = function () {\n  function FileTransferObject() {\n    if (checkAvailability(FileTransfer.getPluginRef(), null, FileTransfer.getPluginName()) === true) {\n      this._objectInstance = new (FileTransfer.getPlugin())();\n    }\n  }\n  /**\n   * Sends a file to a server.\n   *\n   * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n   * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n   * @param {FileUploadOptions} [options]  Optional parameters.\n   * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n   * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n   */\n  /**\n     * Sends a file to a server.\n     *\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n     * @param {FileUploadOptions} [options]  Optional parameters.\n     * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n     */\n  FileTransferObject.prototype.upload =\n  /**\n  * Sends a file to a server.\n  *\n  * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n  * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n  * @param {FileUploadOptions} [options]  Optional parameters.\n  * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n  * @returns {Promise<FileUploadResult>} Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n  */\n  function (fileUrl, url, options, trustAllHosts) {\n    return;\n  };\n  /**\n   * Downloads a file from server.\n   *\n   * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n   * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n   * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n   * @param {object} [Optional] parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n   * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n   */\n  /**\n     * Downloads a file from server.\n     *\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n     * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @param {object} [Optional] parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n     * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n     */\n  FileTransferObject.prototype.download =\n  /**\n  * Downloads a file from server.\n  *\n  * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n  * @param {string} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n  * @param {boolean} [trustAllHosts]  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n  * @param {object} [Optional] parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n  * @returns {Promise<any>} Returns a Promise that resolves to a FileEntry object.\n  */\n  function (source, target, trustAllHosts, options) {\n    return;\n  };\n  /**\n   * Registers a listener that gets called whenever a new chunk of data is transferred.\n   * @param {Function} listener Listener that takes a progress event.\n   */\n  /**\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\n     * @param {Function} listener Listener that takes a progress event.\n     */\n  FileTransferObject.prototype.onProgress =\n  /**\n  * Registers a listener that gets called whenever a new chunk of data is transferred.\n  * @param {Function} listener Listener that takes a progress event.\n  */\n  function (listener) {\n    this._objectInstance.onprogress = listener;\n  };\n  /**\n   * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n   * object which has an error code of FileTransferError.ABORT_ERR.\n   */\n  /**\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n     * object which has an error code of FileTransferError.ABORT_ERR.\n     */\n  FileTransferObject.prototype.abort =\n  /**\n  * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n  * object which has an error code of FileTransferError.ABORT_ERR.\n  */\n  function () {};\n  __decorate([CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  }), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Object, Boolean]), __metadata(\"design:returntype\", Promise)], FileTransferObject.prototype, \"upload\", null);\n  __decorate([CordovaInstance({\n    successIndex: 2,\n    errorIndex: 3\n  }), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [String, String, Boolean, Object]), __metadata(\"design:returntype\", Promise)], FileTransferObject.prototype, \"download\", null);\n  __decorate([InstanceCheck({\n    sync: true\n  }), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Function]), __metadata(\"design:returntype\", void 0)], FileTransferObject.prototype, \"onProgress\", null);\n  __decorate([CordovaInstance({\n    sync: true\n  }), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", []), __metadata(\"design:returntype\", void 0)], FileTransferObject.prototype, \"abort\", null);\n  /**\n   * @hidden\n   */\n  FileTransferObject = __decorate([Plugin({\n    plugin: 'cordova-plugin-file-transfer',\n    pluginName: 'FileTransfer'\n  }), __metadata(\"design:paramtypes\", [])], FileTransferObject);\n  return FileTransferObject;\n}();\nexport { FileTransferObject };\n\n//# sourceMappingURL=index.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}