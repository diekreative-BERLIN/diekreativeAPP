{"ast":null,"code":"/**\n * @license\n * Copyright 2016 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __extends } from \"tslib\";\nimport { MDCComponent } from '@material/base/component';\nimport { applyPassive } from '@material/dom/events';\nimport { matches } from '@material/dom/ponyfill';\nimport { MDCRippleFoundation } from './foundation';\nimport * as util from './util';\nvar MDCRipple = /** @class */function (_super) {\n  __extends(MDCRipple, _super);\n  function MDCRipple() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.disabled = false;\n    return _this;\n  }\n  MDCRipple.attachTo = function (root, opts) {\n    if (opts === void 0) {\n      opts = {\n        isUnbounded: undefined\n      };\n    }\n    var ripple = new MDCRipple(root);\n    // Only override unbounded behavior if option is explicitly specified\n    if (opts.isUnbounded !== undefined) {\n      ripple.unbounded = opts.isUnbounded;\n    }\n    return ripple;\n  };\n  MDCRipple.createAdapter = function (instance) {\n    return {\n      addClass: function (className) {\n        return instance.root.classList.add(className);\n      },\n      browserSupportsCssVars: function () {\n        return util.supportsCssVariables(window);\n      },\n      computeBoundingRect: function () {\n        return instance.root.getBoundingClientRect();\n      },\n      containsEventTarget: function (target) {\n        return instance.root.contains(target);\n      },\n      deregisterDocumentInteractionHandler: function (evtType, handler) {\n        return document.documentElement.removeEventListener(evtType, handler, applyPassive());\n      },\n      deregisterInteractionHandler: function (evtType, handler) {\n        return instance.root.removeEventListener(evtType, handler, applyPassive());\n      },\n      deregisterResizeHandler: function (handler) {\n        return window.removeEventListener('resize', handler);\n      },\n      getWindowPageOffset: function () {\n        return {\n          x: window.pageXOffset,\n          y: window.pageYOffset\n        };\n      },\n      isSurfaceActive: function () {\n        return matches(instance.root, ':active');\n      },\n      isSurfaceDisabled: function () {\n        return Boolean(instance.disabled);\n      },\n      isUnbounded: function () {\n        return Boolean(instance.unbounded);\n      },\n      registerDocumentInteractionHandler: function (evtType, handler) {\n        return document.documentElement.addEventListener(evtType, handler, applyPassive());\n      },\n      registerInteractionHandler: function (evtType, handler) {\n        return instance.root.addEventListener(evtType, handler, applyPassive());\n      },\n      registerResizeHandler: function (handler) {\n        return window.addEventListener('resize', handler);\n      },\n      removeClass: function (className) {\n        return instance.root.classList.remove(className);\n      },\n      updateCssVariable: function (varName, value) {\n        return instance.root.style.setProperty(varName, value);\n      }\n    };\n  };\n  Object.defineProperty(MDCRipple.prototype, \"unbounded\", {\n    get: function () {\n      return Boolean(this.isUnbounded);\n    },\n    set: function (unbounded) {\n      this.isUnbounded = Boolean(unbounded);\n      this.setUnbounded();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  MDCRipple.prototype.activate = function () {\n    this.foundation.activate();\n  };\n  MDCRipple.prototype.deactivate = function () {\n    this.foundation.deactivate();\n  };\n  MDCRipple.prototype.layout = function () {\n    this.foundation.layout();\n  };\n  MDCRipple.prototype.getDefaultFoundation = function () {\n    return new MDCRippleFoundation(MDCRipple.createAdapter(this));\n  };\n  MDCRipple.prototype.initialSyncWithDOM = function () {\n    var root = this.root;\n    this.isUnbounded = 'mdcRippleIsUnbounded' in root.dataset;\n  };\n  /**\n   * Closure Compiler throws an access control error when directly accessing a\n   * protected or private property inside a getter/setter, like unbounded above.\n   * By accessing the protected property inside a method, we solve that problem.\n   * That's why this function exists.\n   */\n  MDCRipple.prototype.setUnbounded = function () {\n    this.foundation.setUnbounded(Boolean(this.isUnbounded));\n  };\n  return MDCRipple;\n}(MDCComponent);\nexport { MDCRipple };\n//# sourceMappingURL=component.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}