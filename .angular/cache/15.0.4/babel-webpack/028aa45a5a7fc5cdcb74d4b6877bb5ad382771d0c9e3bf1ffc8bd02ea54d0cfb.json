{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { HttpParams } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Md5 } from 'ts-md5/dist/md5';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@ionic-native/http/ngx\";\nexport let ChurchapiService = /*#__PURE__*/(() => {\n  class ChurchapiService {\n    constructor(httpClient, http) {\n      this.httpClient = httpClient;\n      this.http = http;\n      //private REST_API_SERVER = environment.churchtoolsurl+\"/api\";\n      //private DK_API_SERVER = environment.churchtoolsurl;\n      //private AJAX_API_SERVER = environment.churchtoolsurl+\"/index.php?\";\n      this.REST_API_SERVER = \"init\";\n      this.DK_API_SERVER = \"init\";\n      this.AJAX_API_SERVER = \"init\";\n      this.PRAY_API_SERVER = environment.prayerapiurl;\n      this.PRAY_API_SERVER_token = environment.prayerapitoken;\n      this.CALENDARROOT = \"q=churchcal/ajax&func=\";\n      this.LOGINROOT = \"q=login/ajax&func=\";\n    }\n    setAPIurl() {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('## get API Urls');\n        yield this.http.get(this.PRAY_API_SERVER + \"/interfaces/ctaddress\", {}, {\n          token: this.PRAY_API_SERVER_token\n        }).then(res => {\n          //console.log(res);\n          let ctadr = JSON.parse(res.data);\n          console.log('>>' + ctadr + '<<');\n          // set new addresses\n          this.REST_API_SERVER = ctadr + \"/api\";\n          this.DK_API_SERVER = ctadr;\n          this.AJAX_API_SERVER = ctadr + \"/index.php?\";\n        }).catch(err => {\n          console.log(\"error setCtUrl \" + JSON.stringify(err));\n        });\n      });\n    }\n    login(username, password) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('#inCTAPI-login');\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        this.http.clearCookies();\n        this.http.setServerTrustMode(\"nocheck\");\n        let usernameEncoded = encodeURIComponent(username);\n        let passwordEncoded = encodeURIComponent(password);\n        return yield this.http.post(this.REST_API_SERVER + \"/login?username=\" + usernameEncoded + \"&password=\" + passwordEncoded, {}, {});\n      });\n    }\n    loginWithToken(userid, token) {\n      return __awaiter(this, void 0, void 0, function* () {\n        console.log('#inCTAPI-loginWithToken');\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        this.http.clearCookies();\n        this.http.setServerTrustMode(\"nocheck\");\n        return yield this.http.post(this.AJAX_API_SERVER + this.LOGINROOT + \"loginWithToken\" + \"&q=login/ajax&token=\" + token + \"&id=\" + userid, {}, {});\n      });\n    }\n    getPersonViaToken(userid, token) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        return this.http.get(this.REST_API_SERVER + \"/persons/\" + userid, {\n          login_token: token\n        }, {});\n      });\n    }\n    getCalendarEventsByCategory(category) {\n      return this.callCalendarMethods(category);\n    }\n    getGroupsForLoggedInPerson(personid) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        var request = \"persons\" + '/' + personid + '/groups';\n        //var params = new HttpParams()\n        return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n        //return this.httpClient.get<ChurchToolGroup>(this.REST_API_SERVER+'/'+request,{params:params, withCredentials:true});\n      });\n    }\n\n    callCalendarMethods(category) {\n      var params = new HttpParams().set('category_ids[]', category);\n      return this.sendAjaxPostRequest(this.CALENDARROOT, \"getCalPerCategory\", params);\n    }\n    sendAjaxPostRequest(requestroot, func, params) {\n      return this.httpClient.post(this.AJAX_API_SERVER + requestroot + func, {}, {\n        params\n      });\n    }\n    sendRestPostRequest(request, params) {\n      console.log(this.REST_API_SERVER + '/' + request + \" \" + params);\n      return this.httpClient.post(this.REST_API_SERVER + '/' + request, {}, {\n        params: params,\n        withCredentials: true,\n        observe: 'response'\n      });\n      //return this.httpClient.post(\"http://ec2-18-184-42-189.eu-central-1.compute.amazonaws.com/api/login?username=admin&password=admin\",{});\n    }\n\n    sendRestGetRequest(request, params) {\n      return this.httpClient.get(this.REST_API_SERVER + '/' + request, {\n        params: params,\n        withCredentials: true\n      });\n    }\n    getLoginToken(personid) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        var request = \"persons\" + '/' + personid + '/logintoken';\n        //var params = new HttpParams()\n        return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n        //return this.httpClient.get(this.REST_API_SERVER+'/'+request,{params:params, withCredentials:true});\n      });\n    }\n\n    getLoginString(personid) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        var request = \"persons\" + '/' + personid + '/loginstring';\n        //var params = new HttpParams()\n        return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n      });\n    }\n    getPersonData(personid) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        var request = \"persons\" + '/' + personid;\n        var params = new HttpParams();\n        return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n        //return this.httpClient.get<PersonResponse>(this.REST_API_SERVER+'/'+request,{params:params, withCredentials:true});\n      });\n    }\n    //get next sunday services\n    getNextGoDiEvents() {\n      return this.http.get(this.PRAY_API_SERVER + \"/calendar/read\", {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    /////////////////// get next prayer watches /////\n    getGebetsschichten(nbEntries, shortusername, explicitusername) {\n      if (shortusername != null) {\n        if (explicitusername != \"\") {\n          console.log(\"getGebetsschichten mit nbEntries:\" + nbEntries + \" UND ctFulluserShort=\" + shortusername + \" UND explicitusername=\" + explicitusername);\n          var request = \"maxEntries\" + '=' + nbEntries + '&ctFulluserShort=' + shortusername + '&ctExplicitUser=' + explicitusername;\n        } else {\n          console.log(\"getGebetsschichten mit nbEntries:\" + nbEntries + \" UND ctFulluserShort=\" + shortusername);\n          var request = \"maxEntries\" + '=' + nbEntries + '&ctFulluserShort=' + shortusername;\n        }\n      } else {\n        console.log(\"getGebetsschichten mit nbEntries:\" + nbEntries);\n        var request = \"maxEntries\" + '=' + nbEntries;\n      }\n      return this.http.get(this.PRAY_API_SERVER + \"/watches/scheduled\" + '/?' + request, {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    /////////////////// Get available watches /////\n    getFreieSchichten() {\n      return this.http.get(this.PRAY_API_SERVER + \"/watches/available\", {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    /////////////////////// take session //////\n    takeSession(availableID, Personname, Praytype) {\n      console.log(\"post auf ../watches/available ID:\" + availableID + \" Name:\" + Personname + \" Type:\" + Praytype);\n      this.http.setDataSerializer('json');\n      //this.http.setServerTrustMode(\"nocheck\");\n      return this.http.post(this.PRAY_API_SERVER + \"/watches/available\", {\n        \"ID\": availableID,\n        \"Name\": Personname,\n        \"Type\": Praytype\n      }, {\n        token: this.PRAY_API_SERVER_token\n      }).then(res => {\n        //console.log( '>>'+ JSON.parse(JSON.stringify(res)).data +'<<');\n        if (JSON.parse(JSON.stringify(res)).data == \"\\\"already_taken\\\"\") {\n          console.log('Schicht - bereits uebernommen!');\n          alert('Oops, da war jemand schneller als Du. Die Schicht wurde gerade bereits von jemand anderem übernommen. Danke dennoch für Deine Bereitschaft!');\n        }\n      }).catch(err => {\n        console.log(\"error take session \" + JSON.stringify(err));\n      });\n    }\n    /////////////////// swap session with someone else /////\n    swapSession(sessID, startdate, enddate, oldentry, Personname, Praytype) {\n      /*\n      $ID = $data[\"ID\"];\n          $task = $data[\"task\"];\n          $oldentry = $data[\"oldentry\"];\n          $startdate = $data[\"startdate\"];\n          $enddate   = $data[\"enddate\"];\n          $newname = $data[\"replace_person\"];\n          $newtype = $data[\"replace_type\"];\n      */\n      console.log(\"post auf ../watches/scheduled ID:\" + sessID + \" start:\" + startdate + \" end:\" + enddate + \" bisher:\" + oldentry + \" neu: Name:\" + Personname + \" Type:\" + Praytype + \" task:swap\");\n      this.http.setDataSerializer('json');\n      //this.http.setServerTrustMode(\"nocheck\");\n      return this.http.post(this.PRAY_API_SERVER + \"/watches/scheduled\", {\n        \"ID\": sessID,\n        \"task\": 'swap',\n        \"startdate\": startdate,\n        \"enddate\": enddate,\n        \"oldentry\": oldentry,\n        \"replace_person\": Personname,\n        \"replace_type\": Praytype\n      }, {\n        token: this.PRAY_API_SERVER_token\n      }).then(res => {\n        console.log(\"response from swap session\" + JSON.stringify(res));\n      }).catch(err => {\n        console.log(\"error swap session \" + JSON.stringify(err));\n      });\n    }\n    /////////////////// release session /////\n    releaseSession(sessID, startdate, enddate, oldentry) {\n      /*\n        $ID = $data[\"ID\"];\n          $task = $data[\"task\"];\n          $oldentry = $data[\"oldentry\"];\n          $startdate = $data[\"startdate\"];\n          $enddate   = $data[\"enddate\"];\n      */\n      console.log(\"post auf ../watches/scheduled ID:\" + sessID + \" start:\" + startdate + \" end:\" + enddate + \" bisher:\" + oldentry + \" task:release\");\n      this.http.setDataSerializer('json');\n      //this.http.setServerTrustMode(\"nocheck\");\n      return this.http.post(this.PRAY_API_SERVER + \"/watches/scheduled\", {\n        \"ID\": sessID,\n        \"task\": 'release',\n        \"startdate\": startdate,\n        \"enddate\": enddate,\n        \"oldentry\": oldentry\n      }, {\n        token: this.PRAY_API_SERVER_token\n      }).then(res => {\n        console.log(\"response from release session\" + JSON.stringify(res));\n      }).catch(err => {\n        console.log(\"error release session \" + JSON.stringify(err));\n      });\n    }\n    /////////////////// Week Topic /////\n    getTopicWeek() {\n      return this.http.get(this.PRAY_API_SERVER + \"/praytopics/week\", {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    /////////////////// Prayer for Persecuted Topic /////\n    getTopicPersecuted() {\n      return this.http.get(this.PRAY_API_SERVER + \"/praytopics/persecuted\", {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    //getGoDiEventInfo\n    getGoDiEventDetails(groupid) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.REST_API_SERVER == 'init') {\n          yield this.setAPIurl();\n        }\n        var request = \"groups\" + '/' + groupid;\n        return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n      });\n    }\n    //check if Person belongs to group\n    checkPersonInGroup(personid) {\n      var request = \"persons/\" + personid + \"/groups?show_overdue_groups=false&show_inactive_groups=false\";\n      return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n    }\n    //get QR Code for Person\n    getQRCode(personid, groupid) {\n      var request = \"groups/\" + groupid + \"/qrcodecheckin/\" + personid;\n      return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n    }\n    //get Relationships for Person\n    getRelationships(personid) {\n      var request = \"persons/\" + personid + \"/relationships\";\n      return this.http.get(this.REST_API_SERVER + '/' + request, {}, {});\n    }\n    /////////////////// Get validity of certificate /////\n    getCheckValidity(personid) {\n      var request = \"personHash\" + '=' + Md5.hashStr(String(personid)); //pass personID as string\n      //return \"get \"+this.PRAY_API_SERVER+\"/checkin/validity\"+'/?'+request;\n      return this.http.get(this.PRAY_API_SERVER + \"/checkin/validity\" + '/?' + request, {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n    //getFamilyQRCodes - use new command through our own prayApi\n    getFamilyQRcodes(personid, groupid) {\n      var request = \"groupID=\" + groupid + \"&personID=\" + personid;\n      return this.http.get(this.PRAY_API_SERVER + \"/checkin/familyqr\" + '/?' + request, {}, {\n        token: this.PRAY_API_SERVER_token\n      });\n    }\n  }\n  ChurchapiService.ɵfac = function ChurchapiService_Factory(t) {\n    return new (t || ChurchapiService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HTTP));\n  };\n  ChurchapiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChurchapiService,\n    factory: ChurchapiService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChurchapiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}