{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\nvar SocialSharing = /** @class */function (_super) {\n  __extends(SocialSharing, _super);\n  function SocialSharing() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  SocialSharing.prototype.share = function (message, subject, file, url) {\n    return cordova(this, \"share\", {\n      \"successIndex\": 4,\n      \"errorIndex\": 5\n    }, arguments);\n  };\n  SocialSharing.prototype.shareWithOptions = function (options) {\n    return cordova(this, \"shareWithOptions\", {\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.canShareVia = function (appName, message, subject, image, url) {\n    return cordova(this, \"canShareVia\", {\n      \"successIndex\": 5,\n      \"errorIndex\": 6,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaTwitter = function (message, image, url) {\n    return cordova(this, \"shareViaTwitter\", {\n      \"successIndex\": 3,\n      \"errorIndex\": 4,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaFacebook = function (message, image, url) {\n    return cordova(this, \"shareViaFacebook\", {\n      \"successIndex\": 3,\n      \"errorIndex\": 4,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaFacebookWithPasteMessageHint = function (message, image, url, pasteMessageHint) {\n    return cordova(this, \"shareViaFacebookWithPasteMessageHint\", {\n      \"successIndex\": 4,\n      \"errorIndex\": 5,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaInstagram = function (message, image) {\n    return cordova(this, \"shareViaInstagram\", {\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaWhatsApp = function (message, image, url) {\n    return cordova(this, \"shareViaWhatsApp\", {\n      \"successIndex\": 3,\n      \"errorIndex\": 4,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaWhatsAppToReceiver = function (receiver, message, image, url) {\n    return cordova(this, \"shareViaWhatsAppToReceiver\", {\n      \"successIndex\": 4,\n      \"errorIndex\": 5,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaSMS = function (messge, phoneNumber) {\n    return cordova(this, \"shareViaSMS\", {\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.canShareViaEmail = function () {\n    return cordova(this, \"canShareViaEmail\", {\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaEmail = function (message, subject, to, cc, bcc, files) {\n    return cordova(this, \"shareViaEmail\", {\n      \"platforms\": [\"iOS\", \"Android\"],\n      \"successIndex\": 6,\n      \"errorIndex\": 7\n    }, arguments);\n  };\n  SocialSharing.prototype.shareVia = function (appName, message, subject, image, url) {\n    return cordova(this, \"shareVia\", {\n      \"successIndex\": 5,\n      \"errorIndex\": 6,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.setIPadPopupCoordinates = function (targetBounds) {\n    return cordova(this, \"setIPadPopupCoordinates\", {\n      \"sync\": true,\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.saveToPhotoAlbum = function (fileOrFileArray) {\n    return cordova(this, \"saveToPhotoAlbum\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n  SocialSharing.prototype.shareViaWhatsAppToPhone = function (phone, message, fileOrFileArray, url) {\n    return cordova(this, \"shareViaWhatsAppToPhone\", {\n      \"successIndex\": 5,\n      \"errorIndex\": 6,\n      \"platforms\": [\"iOS\", \"Android\"]\n    }, arguments);\n  };\n  SocialSharing.pluginName = \"SocialSharing\";\n  SocialSharing.plugin = \"cordova-plugin-x-socialsharing\";\n  SocialSharing.pluginRef = \"plugins.socialsharing\";\n  SocialSharing.repo = \"https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin\";\n  SocialSharing.platforms = [\"Android\", \"Browser\", \"iOS\", \"Windows\", \"Windows Phone\"];\n  SocialSharing.ɵfac = /*@__PURE__*/function () {\n    var ɵSocialSharing_BaseFactory;\n    return function SocialSharing_Factory(t) {\n      return (ɵSocialSharing_BaseFactory || (ɵSocialSharing_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(SocialSharing)))(t || SocialSharing);\n    };\n  }();\n  SocialSharing.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SocialSharing,\n    factory: function (t) {\n      return SocialSharing.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return SocialSharing;\n}(IonicNativePlugin);\nexport { SocialSharing };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}