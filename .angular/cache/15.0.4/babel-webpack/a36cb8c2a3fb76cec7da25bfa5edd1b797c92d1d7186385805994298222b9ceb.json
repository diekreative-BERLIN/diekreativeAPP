{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, checkAvailability, cordova, getPromise } from '@ionic-native/core';\nimport * as ɵngcc0 from '@angular/core';\nvar EmailComposer = /** @class */function (_super) {\n  __extends(EmailComposer, _super);\n  function EmailComposer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  EmailComposer.prototype.hasPermission = function () {\n    return cordova(this, \"hasPermission\", {\n      \"successIndex\": 0,\n      \"errorIndex\": 2\n    }, arguments);\n  };\n  EmailComposer.prototype.requestPermission = function () {\n    return cordova(this, \"requestPermission\", {\n      \"successIndex\": 0,\n      \"errorIndex\": 2\n    }, arguments);\n  };\n  EmailComposer.prototype.hasAccount = function () {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          EmailComposer.getPlugin().hasAccount(function (result) {\n            if (result) {\n              resolve(true);\n            } else {\n              resolve(false);\n            }\n          });\n        });\n      }\n    }();\n  };\n  EmailComposer.prototype.hasClient = function (app) {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          if (app) {\n            EmailComposer.getPlugin().hasClient(app, function (result) {\n              if (result) {\n                resolve(true);\n              } else {\n                resolve(false);\n              }\n            });\n          } else {\n            EmailComposer.getPlugin().getClients(function (apps) {\n              resolve(apps && apps.length > 0);\n            });\n          }\n        });\n      }\n    }();\n  };\n  EmailComposer.prototype.getClients = function () {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          EmailComposer.getPlugin().getClients(function (apps) {\n            if (Object.prototype.toString.call(apps) === '[object String]') {\n              apps = [apps];\n            }\n            resolve(apps);\n          });\n        });\n      }\n    }();\n  };\n  EmailComposer.prototype.isAvailable = function (app) {\n    var _this = this;\n    return function () {\n      if (checkAvailability(_this) === true) {\n        return getPromise(function (resolve) {\n          Promise.all([_this.hasAccount, _this.hasClient(app)]).then(function (results) {\n            return resolve(results.length === 2 && results[0] && results[1]);\n          });\n        });\n      }\n    }();\n  };\n  EmailComposer.prototype.open = function (options, scope) {\n    return cordova(this, \"open\", {\n      \"successIndex\": 1,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n  EmailComposer.prototype.addAlias = function (alias, packageName) {\n    return cordova(this, \"addAlias\", {}, arguments);\n  };\n  EmailComposer.pluginName = \"EmailComposer\";\n  EmailComposer.plugin = \"cordova-plugin-email-composer\";\n  EmailComposer.pluginRef = \"cordova.plugins.email\";\n  EmailComposer.repo = \"https://github.com/katzer/cordova-plugin-email-composer\";\n  EmailComposer.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Windows\", \"macOS\"];\n  EmailComposer.ɵfac = /*@__PURE__*/function () {\n    var ɵEmailComposer_BaseFactory;\n    return function EmailComposer_Factory(t) {\n      return (ɵEmailComposer_BaseFactory || (ɵEmailComposer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(EmailComposer)))(t || EmailComposer);\n    };\n  }();\n  EmailComposer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: EmailComposer,\n    factory: function (t) {\n      return EmailComposer.ɵfac(t);\n    }\n  });\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n  return EmailComposer;\n}(IonicNativePlugin);\nexport { EmailComposer };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}